"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventIncrementRoundV2 = void 0;
const Event_1 = require("../models/Event");
const logger_1 = require("../config/logger");
const User_1 = require("../models/User");
const Slack_1 = require("./Slack");
/**
 * No concept of closing round, opening round only
 * @param eventId
 * @param userId
 * @param roundNumber
 * @constructor
 */
exports.EventIncrementRoundV2 = async function (req, eventId, userId, roundNumber) {
    let event;
    event = await Event_1.default.findById(eventId);
    if (!event.CurrentRound || (event.CurrentRound.RoundNumber !== roundNumber && roundNumber > event.CurrentRound.RoundNumber)) { // if a round is running, complete it
        if (event.CurrentRound) {
            await closeRound(event, userId);
        }
        await startRound(event, userId);
    }
    const cacheKey = `app-event-list-`;
    const cacheDel = req.app.get('cacheDel');
    const cacheDelPromises = [];
    cacheDelPromises.push(cacheDel(`${cacheKey}${eventId}`));
    cacheDelPromises.push(cacheDel(cacheKey));
    await Promise.all(cacheDelPromises);
    logger_1.default.info(`roundNumber ${roundNumber} 'event.CurrentRound.RoundNumber', ${event.CurrentRound && event.CurrentRound.RoundNumber}`);
};
async function closeRound(event, userId) {
    logger_1.default.info(`Closing round ${event.CurrentRound.RoundNumber}`);
    const currentRound = event.Rounds
        .find(r => r.RoundNumber == event.CurrentRound.RoundNumber);
    currentRound.IsFinished = true;
    // currentRound.Contestants = event.CurrentRound.Contestants;
    let totalVotes = 0;
    for (let i = 0; i < event.CurrentRound.Contestants.length; i++) {
        currentRound.Contestants[i].Enabled = event.CurrentRound.Contestants[i].Enabled;
        currentRound.Contestants[i].EaselNumber = event.CurrentRound.Contestants[i].EaselNumber;
        totalVotes += currentRound.Contestants[i].Votes.length;
    }
    event.CurrentRound = null;
    const user = await User_1.default.findById(userId);
    const message = `${event.Name}, Round ${currentRound.RoundNumber} is closed by ${user && user.email}, votes ${totalVotes}`;
    event.Logs.push({
        Message: message,
        CreatedDate: new Date()
    });
    const result = await event.save();
    const operationResult = {
        Success: true,
        Data: result
    };
    // send message to slack channel
    Slack_1.default({
        'text': message
    }).catch(() => logger_1.default.info('close round slack call failed, message was ', message));
    return operationResult;
}
async function startRound(event, userId) {
    const availableRounds = event.Rounds.filter(r => !r.IsFinished);
    if (availableRounds.length > 0) { // if there are any rounds left, start the next one
        const nextRound = availableRounds.reduce((prev, cur) => {
            return prev.RoundNumber < cur.RoundNumber ? prev : cur;
        });
        logger_1.default.info(`Starting round ${nextRound.RoundNumber}`);
        event.CurrentRound = nextRound;
        // After sending response send message to slack channel
        const user = await User_1.default.findById(userId);
        const message = `${event.Name}, Round ${nextRound.RoundNumber} is started by ${user && user.email}, registered: ${event.Registrations.length}`;
        event.Logs.push({
            Message: message,
            CreatedDate: new Date()
        });
        const result = await event.save();
        /*await EventModel.findOneAndUpdate({
            _id: event._id
        }, event);

        const  result = await EventModel.findOne({
            _id: event._id
        });*/
        const operationResult = {
            Success: true,
            Data: result
        };
        Slack_1.default({
            'text': message
        }).catch(() => logger_1.default.info('starting round slack call failed, message was ', message));
        return operationResult;
    }
    else { // loop if all rounds are finished.
        logger_1.default.info('Attempted to increment round on finished event. Looping rounds.');
        event.Rounds.forEach(r => r.IsFinished = false);
        event.CurrentRound = null;
        const user = await User_1.default.findById(userId);
        const message = `${event.Name} is finished but round is being started by ${user && user.email}`;
        event.Logs.push({
            Message: message,
            CreatedDate: new Date()
        });
        const result = await event.save();
        const operationResult = {
            Success: true,
            Data: result
        };
        // After sending response send message to slack channel
        Slack_1.default({
            'text': message
        }).catch(() => logger_1.default.info(' finish event, attempt to increment round call failed ', message));
        return operationResult;
        // logger.info('Attempted to increment round on finished event.');
        // const operationResult: OperationResult = {
        //     Success: false
        // };
        // res.json(operationResult);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
