{"version":3,"sources":["controllers/event.ts"],"names":[],"mappings":"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","file":"event.js","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { default as EventModel, EventDocument } from '../models/Event';\r\nimport { RoundConfigDTO } from '../../../shared/RoundDTO';\r\nimport { RoundContestantDTO, EventContestantDTO } from '../../../shared/ContestantDTO';\r\nimport { EventConfigDTO, EventDTO } from '../../../shared/EventDTO';\r\nimport * as utils from '../utils';\r\nimport { DataOperationResult, OperationResult, CreateOperationResult } from '../../../shared/OperationResult';\r\nimport { nextTick } from 'q/index';\r\n\r\nexport const voteSMS = async (request: Request, response: Response, next: NextFunction) => {\r\n    response.header('Content-Type', 'text/xml');\r\n\r\n    console.log(`voteSMS() called at ${new Date().toISOString()}`);\r\n\r\n    const body = request.param('Body').trim();\r\n    // the number the vote it being sent to (this should match an Event)\r\n    const to = request.param('To').slice(1);\r\n\r\n    // the voter, use this to keep people from voting more than once\r\n    const from = request.param('From');\r\n    console.log(`Vote received - Body: ${body} From: ${from} To: ${to}`);\r\n\r\n    let events: EventDocument[];\r\n    try {\r\n        events = await EventModel\r\n            .find( { PhoneNumber: to } )\r\n            .limit(1)\r\n            .exec();\r\n    } catch (err) {\r\n        console.log(err);\r\n        response.send('<Response>Sorry! Our system encountered an error. Please try again.</Response>');\r\n        return next(err);\r\n    }\r\n\r\n    const event = events[0];\r\n\r\n    if (events.length < 1) {\r\n        console.log(`No event is configured at this number: ${to}`);\r\n        // silently fail for the user\r\n        response.send('<Response><Sms>Sorry! No event is currently running at this number. Please check the number and try again.</Sms></Response>');\r\n    }\r\n    else if (!event.Enabled) {\r\n        response.send('<Response><Sms>Voting is now closed.</Sms></Response>');\r\n    }\r\n    else if (!utils.testint(body)) {\r\n        console.log('Bad vote: ' + event.Name + ', ' + from + ', ' + body);\r\n        response.send('<Response><Sms>Sorry, invalid vote. Please text a number between 1 and ' + event.Contestants.length + '</Sms></Response>');\r\n    }\r\n    else if (utils.testint(body) && (parseInt(body) <= 0 || !event.CurrentRound.Contestants.map(c => c.ContestantNumber).contains(parseInt(body)))) {\r\n        console.log('Bad vote: ' + event.Name + ', ' + from + ', ' + body + ', ' + ('[1-' + event.Contestants.length + ']'));\r\n        response.send('<Response><Sms>Sorry, invalid vote. Please text a number between 1 and ' + event.Contestants.length + '</Sms></Response>');\r\n    }\r\n    else if (!event.CurrentRound) {\r\n        console.log(`No round is currently selected for event: ${event.Name}`);\r\n        response.send('<Response><Sms>Voting is now closed.</Sms></Response>');\r\n    }\r\n    else if (event.hasVoted(from)) {\r\n        console.log('Denying vote: ' + event.Name + ', ' + from + ' - Already voted');\r\n        response.send('<Response><Sms>Sorry, you are only allowed to vote once per round.</Sms></Response>');\r\n    }\r\n    else {\r\n        const choice = parseInt(body);\r\n        const registration = event.Registrations.find(r => r.PhoneNumber == from);\r\n\r\n        event.CurrentRound.Contestants\r\n            .find(c => c.ContestantNumber === choice)\r\n            .Votes.push(registration);\r\n\r\n        event.save((err) => {\r\n            if (err) {\r\n                response.send('<Response><Sms>We encountered an error saving your vote. Try again?</Sms></Response>');\r\n            }\r\n            else {\r\n                console.log('Accepting vote: ' + event.Name + ', ' + from);\r\n                response.send('<Response><Sms>Thanks for your vote for ' + event.Name + '. Powered by Twilio.</Sms></Response>');\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const saveEvent = async (req: Request, res: Response, next: NextFunction) => {\r\n    const dto: EventConfigDTO = req.body;\r\n    let savedEvent: EventDocument;\r\n    if (!dto._id) {\r\n        const eventDTO: EventDTO = dto as EventDTO;\r\n        eventDTO.Rounds = eventDTO.Rounds.map(r => {\r\n                r.IsFinished = false;\r\n                return r;\r\n            }\r\n        );\r\n        const event = new EventModel(eventDTO);\r\n        try {\r\n            savedEvent = await event.save();\r\n        } catch (err) {\r\n            return next(err);\r\n        }\r\n\r\n        const result: DataOperationResult<EventDTO> = {\r\n            Success: true,\r\n            Data: savedEvent\r\n        };\r\n        res.json(result);\r\n    } else {\r\n        try {\r\n            savedEvent = await EventModel.findByIdAndUpdate(dto._id, dto, { upsert: true });\r\n            const result: DataOperationResult<EventDTO> = {\r\n                Success: true,\r\n                Data: savedEvent\r\n            };\r\n            res.json(result);\r\n        } catch (err) {\r\n            return next(err);\r\n        }\r\n    }\r\n};\r\n\r\nexport const deleteEvent = (req: Request, res: Response, next: NextFunction) => {\r\n    EventModel.findByIdAndRemove(req.params.eventId, (err, product: EventDocument) => {\r\n        if (err) {\r\n            return next(err);\r\n        }\r\n\r\n        const result: OperationResult = {\r\n            Success: true\r\n        };\r\n\r\n        res.json(result);\r\n    });\r\n};\r\n\r\nexport const getEvents = (req: Request, res: Response, next: NextFunction) => {\r\n    EventModel.find((err, events: EventDocument[]) => {\r\n        if (err) {\r\n            return next(err);\r\n        }\r\n        events = events.map(v => {\r\n            v.Contestants = v.Contestants.sort((c1, c2) => c1.ContestantNumber - c2.ContestantNumber);\r\n            return v;\r\n        });\r\n        res.json(events);\r\n    });\r\n};\r\n\r\nexport const getEvent = async (req: Request, res: Response, next: NextFunction) => {\r\n    let event: EventDocument;\r\n    try {\r\n        event = await EventModel.findById(req.params.eventId);\r\n    }\r\n    catch (err) {\r\n        return next(err);\r\n    }\r\n    event.Contestants = event.Contestants.sort((c1, c2) => c1.ContestantNumber - c2.ContestantNumber);\r\n    res.json(event);\r\n};\r\n\r\nexport const incrementRound = async (req: Request, res: Response, next: NextFunction) => {\r\n    let event: EventDocument;\r\n    try {\r\n        event = await EventModel.findById(req.params.eventId);\r\n\r\n        if (event.CurrentRound) { // if a round is running, complete it\r\n\r\n            console.log(`Closing round ${event.CurrentRound.RoundNumber}`);\r\n\r\n            const currentRoundIdx = event.Rounds\r\n                .findIndex(r => r.RoundNumber == event.CurrentRound.RoundNumber);\r\n            const currentRound = event.Rounds[currentRoundIdx];\r\n            currentRound.IsFinished = true;\r\n            currentRound.Contestants = event.CurrentRound.Contestants;\r\n            event.Rounds = event.Rounds.splice(currentRoundIdx, 1, currentRound);\r\n            event.CurrentRound = null;\r\n            const result = await event.save();\r\n            const operationResult: DataOperationResult<EventDTO> = {\r\n                Success: true,\r\n                Data: result\r\n            };\r\n            res.json(operationResult);\r\n        }\r\n        else {\r\n            const availableRounds = event.Rounds.filter(r => !r.IsFinished);\r\n            if (availableRounds.length > 0) { // if there are any rounds left, start the next one\r\n                const nextRound = availableRounds.reduce((prev, cur) => {\r\n                    return prev.RoundNumber < cur.RoundNumber ? prev : cur;\r\n                });\r\n\r\n                console.log(`Starting round ${nextRound.RoundNumber}`);\r\n\r\n                event.CurrentRound = nextRound;\r\n                const result = await event.save();\r\n                const operationResult: DataOperationResult<EventDTO> = {\r\n                    Success: true,\r\n                    Data: result\r\n                };\r\n                res.json(operationResult);\r\n            }\r\n            else { // can't increment because all rounds are finished. return failure.\r\n                console.log('Attempted to increment round on finished event.');\r\n                const operationResult: OperationResult = {\r\n                    Success: false\r\n                };\r\n                res.json(operationResult);\r\n            }\r\n        }\r\n    }\r\n    catch (err) {\r\n        return next(err);\r\n    }\r\n};"]}