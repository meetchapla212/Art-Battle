"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProfile = void 0;
const VotingLog_1 = require("../models/VotingLog");
const Event_1 = require("../models/Event");
exports.getProfile = async function (hash) {
    const results = await VotingLog_1.default.aggregate([
        {
            '$match': {
                'PhoneHash': hash,
                'Status': 'VOTE_ACCEPTED'
            }
        }, {
            '$group': {
                '_id': {
                    'EaselNumber': '$EaselNumber',
                    'RoundNumber': '$RoundNumber',
                    'EventId': '$EventId'
                },
                'ArtistName': {
                    '$push': '$ArtistName'
                },
                'EventName': {
                    '$push': '$EventName'
                },
                'DisplayPhone': {
                    '$push': '$DisplayPhone'
                },
                'createdAt': {
                    '$push': '$createdAt'
                },
                'VoteFactor': {
                    '$push': '$VoteFactor'
                }
            }
        }, {
            '$sort': {
                'createdAt': -1
            }
        }
    ]);
    const profileOutput = {
        'phoneNum': '',
        'totalVotes': 0,
        'totalEvents': 0,
        'Events': {},
    };
    let totalEvents = 0;
    let totalVotes = 0;
    profileOutput.VoteFactor = (results[0] && results[0].VoteFactor) || 0;
    for (let i = 0; i < results.length; i++) {
        if (profileOutput.phoneNum.length === 0) {
            profileOutput.phoneNum = results[i].DisplayPhone[0];
        }
        if (!profileOutput['Events'].hasOwnProperty(results[i]._id.EventId)) {
            const event = await Event_1.default.findById(results[i]._id.EventId)
                .select(['Country'])
                .populate('Country');
            profileOutput['Events'][results[i]._id.EventId] = {
                'Date': results[i].createdAt[0],
                'EventName': results[i].EventName[0],
                'Rounds': [],
                'NumVotes': 0,
                'VoteFactor': results[i].VoteFactor[0],
                'Flag': event.Country && event.Country.country_image,
                'VoteDots': ''
            };
            totalEvents++;
        }
        profileOutput['Events'][results[i]._id.EventId].NumVotes++;
        profileOutput['Events'][results[i]._id.EventId].VoteDots += '&#9673;';
        profileOutput['Events'][results[i]._id.EventId].Rounds.push({
            ArtistName: results[i].ArtistName[0],
            'Name': `Round ${results[i]._id.RoundNumber}`
        });
        totalVotes++;
    }
    profileOutput.totalVotes = totalVotes;
    profileOutput.totalEvents = totalEvents;
    return profileOutput;
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RUFBRSxFQUFFO2FBQ2pCLENBQUM7WUFDRixXQUFXLEVBQUUsQ0FBQztTQUNqQjtRQUNELGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzNELGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUM7UUFDdEUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztZQUN4RCxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDcEMsTUFBTSxFQUFFLFNBQVMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUU7U0FDaEQsQ0FBQyxDQUFDO1FBQ0gsVUFBVSxFQUFFLENBQUM7S0FDaEI7SUFDRCxhQUFhLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUN0QyxhQUFhLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUN4QyxPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDLENBQUMiLCJmaWxlIjoiY29tbW9uL1Byb2ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVm90aW5nTG9nTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1ZvdGluZ0xvZyc7XG5pbXBvcnQgRXZlbnRNb2RlbCBmcm9tICcuLi9tb2RlbHMvRXZlbnQnO1xuXG5leHBvcnQgY29uc3QgZ2V0UHJvZmlsZSA9IGFzeW5jIGZ1bmN0aW9uIChoYXNoOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgVm90aW5nTG9nTW9kZWwuYWdncmVnYXRlKFtcbiAgICAgICAge1xuICAgICAgICAgICAgJyRtYXRjaCc6IHtcbiAgICAgICAgICAgICAgICAnUGhvbmVIYXNoJzogaGFzaCxcbiAgICAgICAgICAgICAgICAnU3RhdHVzJzogJ1ZPVEVfQUNDRVBURUQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICckZ3JvdXAnOiB7XG4gICAgICAgICAgICAgICAgJ19pZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0Vhc2VsTnVtYmVyJzogJyRFYXNlbE51bWJlcicsXG4gICAgICAgICAgICAgICAgICAgICdSb3VuZE51bWJlcic6ICckUm91bmROdW1iZXInLFxuICAgICAgICAgICAgICAgICAgICAnRXZlbnRJZCc6ICckRXZlbnRJZCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdBcnRpc3ROYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAnJHB1c2gnOiAnJEFydGlzdE5hbWUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnRXZlbnROYW1lJzoge1xuICAgICAgICAgICAgICAgICAgICAnJHB1c2gnOiAnJEV2ZW50TmFtZSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdEaXNwbGF5UGhvbmUnOiB7XG4gICAgICAgICAgICAgICAgICAgICckcHVzaCc6ICckRGlzcGxheVBob25lJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2NyZWF0ZWRBdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJyRwdXNoJzogJyRjcmVhdGVkQXQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnVm90ZUZhY3Rvcic6IHtcbiAgICAgICAgICAgICAgICAgICAgJyRwdXNoJzogJyRWb3RlRmFjdG9yJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgJyRzb3J0Jzoge1xuICAgICAgICAgICAgICAgICdjcmVhdGVkQXQnOiAtMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSk7XG5cbiAgICBjb25zdCBwcm9maWxlT3V0cHV0OiB7XG4gICAgICAgICdwaG9uZU51bSc6IFN0cmluZyxcbiAgICAgICAgJ3RvdGFsVm90ZXMnOiBOdW1iZXIsXG4gICAgICAgICd0b3RhbEV2ZW50cyc6IE51bWJlcixcbiAgICAgICAgJ0V2ZW50cyc6IHtcbiAgICAgICAgICAgIFtrOiBzdHJpbmddOiB7XG4gICAgICAgICAgICAgICAgRGF0ZTogU3RyaW5nLFxuICAgICAgICAgICAgICAgIEV2ZW50TmFtZTogU3RyaW5nLFxuICAgICAgICAgICAgICAgIFJvdW5kczoge1xuICAgICAgICAgICAgICAgICAgICBBcnRpc3ROYW1lOiBTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIE5hbWU6IFN0cmluZ1xuICAgICAgICAgICAgICAgIH1bXSxcbiAgICAgICAgICAgICAgICBOdW1Wb3RlczogbnVtYmVyLFxuICAgICAgICAgICAgICAgIFZvdGVGYWN0b3I6IG51bWJlcixcbiAgICAgICAgICAgICAgICBGbGFnOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgVm90ZURvdHM6IHN0cmluZ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFZvdGVGYWN0b3I/OiBudW1iZXI7XG4gICAgfSA9IHtcbiAgICAgICAgJ3Bob25lTnVtJzogJycsXG4gICAgICAgICd0b3RhbFZvdGVzJzogMCxcbiAgICAgICAgJ3RvdGFsRXZlbnRzJzogMCxcbiAgICAgICAgJ0V2ZW50cyc6IHt9LFxuICAgIH07XG4gICAgbGV0IHRvdGFsRXZlbnRzID0gMDtcbiAgICBsZXQgdG90YWxWb3RlcyA9IDA7XG4gICAgcHJvZmlsZU91dHB1dC5Wb3RlRmFjdG9yID0gKHJlc3VsdHNbMF0gJiYgcmVzdWx0c1swXS5Wb3RlRmFjdG9yKSB8fCAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJvZmlsZU91dHB1dC5waG9uZU51bS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHByb2ZpbGVPdXRwdXQucGhvbmVOdW0gPSByZXN1bHRzW2ldLkRpc3BsYXlQaG9uZVswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByb2ZpbGVPdXRwdXRbJ0V2ZW50cyddLmhhc093blByb3BlcnR5KHJlc3VsdHNbaV0uX2lkLkV2ZW50SWQpKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGF3YWl0IEV2ZW50TW9kZWwuZmluZEJ5SWQocmVzdWx0c1tpXS5faWQuRXZlbnRJZClcbiAgICAgICAgICAgICAgICAuc2VsZWN0KFsnQ291bnRyeSddKVxuICAgICAgICAgICAgICAgIC5wb3B1bGF0ZSgnQ291bnRyeScpO1xuICAgICAgICAgICAgcHJvZmlsZU91dHB1dFsnRXZlbnRzJ11bcmVzdWx0c1tpXS5faWQuRXZlbnRJZF0gPSB7XG4gICAgICAgICAgICAgICAgJ0RhdGUnOiByZXN1bHRzW2ldLmNyZWF0ZWRBdFswXSxcbiAgICAgICAgICAgICAgICAnRXZlbnROYW1lJzogcmVzdWx0c1tpXS5FdmVudE5hbWVbMF0sXG4gICAgICAgICAgICAgICAgJ1JvdW5kcyc6IFtdLFxuICAgICAgICAgICAgICAgICdOdW1Wb3Rlcyc6IDAsXG4gICAgICAgICAgICAgICAgJ1ZvdGVGYWN0b3InOiByZXN1bHRzW2ldLlZvdGVGYWN0b3JbMF0sXG4gICAgICAgICAgICAgICAgJ0ZsYWcnOiBldmVudC5Db3VudHJ5ICYmIGV2ZW50LkNvdW50cnkuY291bnRyeV9pbWFnZSxcbiAgICAgICAgICAgICAgICAnVm90ZURvdHMnOiAnJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRvdGFsRXZlbnRzKys7XG4gICAgICAgIH1cbiAgICAgICAgcHJvZmlsZU91dHB1dFsnRXZlbnRzJ11bcmVzdWx0c1tpXS5faWQuRXZlbnRJZF0uTnVtVm90ZXMrKztcbiAgICAgICAgcHJvZmlsZU91dHB1dFsnRXZlbnRzJ11bcmVzdWx0c1tpXS5faWQuRXZlbnRJZF0uVm90ZURvdHMgKz0gJyYjOTY3MzsnO1xuICAgICAgICBwcm9maWxlT3V0cHV0WydFdmVudHMnXVtyZXN1bHRzW2ldLl9pZC5FdmVudElkXS5Sb3VuZHMucHVzaCh7XG4gICAgICAgICAgICBBcnRpc3ROYW1lOiByZXN1bHRzW2ldLkFydGlzdE5hbWVbMF0sXG4gICAgICAgICAgICAnTmFtZSc6IGBSb3VuZCAke3Jlc3VsdHNbaV0uX2lkLlJvdW5kTnVtYmVyfWBcbiAgICAgICAgfSk7XG4gICAgICAgIHRvdGFsVm90ZXMrKztcbiAgICB9XG4gICAgcHJvZmlsZU91dHB1dC50b3RhbFZvdGVzID0gdG90YWxWb3RlcztcbiAgICBwcm9maWxlT3V0cHV0LnRvdGFsRXZlbnRzID0gdG90YWxFdmVudHM7XG4gICAgcmV0dXJuIHByb2ZpbGVPdXRwdXQ7XG59OyJdfQ==
