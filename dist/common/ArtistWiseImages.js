"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const artistWiseImages = function (artistsInRound, user, contestantId) {
    let hasImages = false;
    const artists = [];
    for (let k = 0; k < artistsInRound.length; k++) {
        if (artistsInRound[k].EaselNumber && artistsInRound[k].Enabled
            && (!contestantId || (contestantId && artistsInRound[k].Detail && artistsInRound[k].Detail._id.toString() === contestantId.toString()))) {
            const names = artistsInRound[k].Detail.Name.trim().split(' ');
            let firstName = '';
            let lastName = '';
            let originalFirstName = '';
            let originalLastName = '';
            // to highlight first name
            for (let i = 0; i < names.length; i++) {
                if (i !== (names.length - 1)) {
                    if (i > 0) {
                        firstName += ' ';
                    }
                    if (names[i].trim() !== '') {
                        firstName += names[i];
                        originalFirstName += names[i];
                    }
                }
                else {
                    lastName = ' ' + names[i];
                    originalLastName = ' ' + names[i];
                    if (artistsInRound[k].IsWinner === 1) {
                        lastName += ' (W)';
                    }
                }
            }
            if (artistsInRound[k].Images.length > 0) {
                hasImages = true;
            }
            let hasVoted = false;
            if (user) {
                hasVoted = !!(artistsInRound[k].Votes.find((v) => {
                    return v._id.toString() === user._id.toString();
                }));
            }
            const combined = [];
            for (let i = 0; i < artistsInRound[k].Images.length; i++) {
                const imageObj = artistsInRound[k].Images[i];
                const combinedObj = Object.assign({ FileType: 'image' }, JSON.parse(JSON.stringify(imageObj)));
                combined.push(combinedObj);
            }
            for (let i = 0; i < artistsInRound[k].Videos.length; i++) {
                const videoObj = artistsInRound[k].Videos[i];
                const combinedObj = Object.assign({ FileType: 'video' }, JSON.parse(JSON.stringify(videoObj)));
                combined.push(combinedObj);
            }
            artists.push({
                EaselNumber: artistsInRound[k].EaselNumber,
                Name: [firstName, lastName],
                OriginalName: [originalFirstName, originalLastName],
                id: artistsInRound[k]._id,
                ArtistId: artistsInRound[k].Detail._id,
                Images: artistsInRound[k].Images,
                Videos: artistsInRound[k].Videos,
                IsWinner: artistsInRound[k].IsWinner,
                EnableAuction: artistsInRound[k].EnableAuction,
                HasVoted: hasVoted,
                Combined: combined.sort((a, b) => {
                    if (a.Original && b.Original) {
                        return parseInt(a.Original.id, 16) - parseInt(b.Original.id, 16);
                    }
                    else {
                        return 0;
                    }
                })
            });
        }
    }
    const result = {
        artists: artists.sort((a, b) => {
            return a.EaselNumber - b.EaselNumber;
        }),
        hasImages: hasImages
    };
    return result;
};
exports.default = artistWiseImages;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9BcnRpc3RXaXNlSW1hZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLGNBQW9DLEVBQUUsSUFBc0IsRUFBRSxZQUFrQjtJQUMvRyxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFLdEIsTUFBTSxPQUFPLEdBQXNCLEVBQUUsQ0FBQztJQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM1QyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87ZUFDdkQsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksSUFBSSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUU7WUFDekksTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlELElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUNuQixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbEIsSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7WUFDM0IsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7WUFDMUIsMEJBQTBCO1lBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcs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QyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ2hDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTtnQkFDaEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRO2dCQUNwQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWE7Z0JBQzlDLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7d0JBQzFCLE9BQVEsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztxQkFDckU7eUJBQU07d0JBQ0gsT0FBTyxDQUFDLENBQUM7cUJBQ1o7Z0JBQ0wsQ0FBQyxDQUFDO2FBQ0wsQ0FBQyxDQUFDO1NBQ047S0FDSjtJQUNELE1BQU0sTUFBTSxHQUFvQjtRQUM1QixPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQixPQUFPLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUN6QyxDQUFDLENBQUM7UUFDRixTQUFTLEVBQUUsU0FBUztLQUN2QixDQUFDO0lBQ0YsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRUYsa0JBQWUsZ0JBQWdCLENBQUMiLCJmaWxlIjoiY29tbW9uL0FydGlzdFdpc2VJbWFnZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91bmRDb250ZXN0YW50RFRPIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Sb3VuZENvbnRlc3RhbnREVE8nO1xuaW1wb3J0IHsgQXJ0aXN0c0luSW1hZ2VzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL0FydGlzdEltYWdlRFRPJztcbmltcG9ydCB7IEFydGlzdENvbWJpbmVkQ2xpZW50RHRvLCBBcnRpc3REdG8gfSBmcm9tICcuLi8uLi8uLi9jbGllbnQvc3JjL1ZvdGluZy9BcnRpc3RJbnRlcmZhY2UnO1xuaW1wb3J0IFJlZ2lzdHJhdGlvbkRUTyBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUmVnaXN0cmF0aW9uRFRPJztcblxuY29uc3QgYXJ0aXN0V2lzZUltYWdlcyA9IGZ1bmN0aW9uIChhcnRpc3RzSW5Sb3VuZDogUm91bmRDb250ZXN0YW50RFRPW10sIHVzZXI/OiBSZWdpc3RyYXRpb25EVE8sIGNvbnRlc3RhbnRJZD86IGFueSkge1xuICAgIGxldCBoYXNJbWFnZXMgPSBmYWxzZTtcbiAgICBpbnRlcmZhY2UgQ3VzdG9tQXJ0aXN0RHRvIGV4dGVuZHMgQXJ0aXN0RHRvIHtcbiAgICAgICAgSGFzVm90ZWQ6IGJvb2xlYW47XG4gICAgfVxuXG4gICAgY29uc3QgYXJ0aXN0czogQ3VzdG9tQXJ0aXN0RHRvW10gPSBbXTtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IGFydGlzdHNJblJvdW5kLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIGlmIChhcnRpc3RzSW5Sb3VuZFtrXS5FYXNlbE51bWJlciAmJiBhcnRpc3RzSW5Sb3VuZFtrXS5FbmFibGVkXG4gICAgICAgICAgICAmJiAoIWNvbnRlc3RhbnRJZCB8fCAoY29udGVzdGFudElkICYmIGFydGlzdHNJblJvdW5kW2tdLkRldGFpbCAmJiBhcnRpc3RzSW5Sb3VuZFtrXS5EZXRhaWwuX2lkLnRvU3RyaW5nKCkgPT09IGNvbnRlc3RhbnRJZC50b1N0cmluZygpKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gYXJ0aXN0c0luUm91bmRba10uRGV0YWlsLk5hbWUudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICBsZXQgZmlyc3ROYW1lID0gJyc7XG4gICAgICAgICAgICBsZXQgbGFzdE5hbWUgPSAnJztcbiAgICAgICAgICAgIGxldCBvcmlnaW5hbEZpcnN0TmFtZSA9ICcnO1xuICAgICAgICAgICAgbGV0IG9yaWdpbmFsTGFzdE5hbWUgPSAnJztcbiAgICAgICAgICAgIC8vIHRvIGhpZ2hsaWdodCBmaXJzdCBuYW1lXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IChuYW1lcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZSArPSAnICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVzW2ldLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZSArPSBuYW1lc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRmlyc3ROYW1lICs9IG5hbWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWUgPSAnICcgKyBuYW1lc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxMYXN0TmFtZSA9ICcgJyArIG5hbWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJ0aXN0c0luUm91bmRba10uSXNXaW5uZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lICs9ICcgKFcpJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcnRpc3RzSW5Sb3VuZFtrXS5JbWFnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGhhc0ltYWdlcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaGFzVm90ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgaGFzVm90ZWQgPSAhIShhcnRpc3RzSW5Sb3VuZFtrXS5Wb3Rlcy5maW5kKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2Ll9pZC50b1N0cmluZygpID09PSB1c2VyLl9pZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVkID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFydGlzdHNJblJvdW5kW2tdLkltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlT2JqID0gYXJ0aXN0c0luUm91bmRba10uSW1hZ2VzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVkT2JqOiBBcnRpc3RDb21iaW5lZENsaWVudER0byA9IHsuLi57RmlsZVR5cGU6ICdpbWFnZSd9LCAuLi5KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGltYWdlT2JqKSl9O1xuICAgICAgICAgICAgICAgIGNvbWJpbmVkLnB1c2goY29tYmluZWRPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnRpc3RzSW5Sb3VuZFtrXS5WaWRlb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWRlb09iajogQXJ0aXN0Q29tYmluZWRDbGllbnREdG8gPSBhcnRpc3RzSW5Sb3VuZFtrXS5WaWRlb3NbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgY29tYmluZWRPYmo6IEFydGlzdENvbWJpbmVkQ2xpZW50RHRvID0gey4uLntGaWxlVHlwZTogJ3ZpZGVvJ30sIC4uLkpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodmlkZW9PYmopKX07XG4gICAgICAgICAgICAgICAgY29tYmluZWQucHVzaChjb21iaW5lZE9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcnRpc3RzLnB1c2goe1xuICAgICAgICAgICAgICAgIEVhc2VsTnVtYmVyOiBhcnRpc3RzSW5Sb3VuZFtrXS5FYXNlbE51bWJlcixcbiAgICAgICAgICAgICAgICBOYW1lOiBbZmlyc3ROYW1lLCBsYXN0TmFtZV0sXG4gICAgICAgICAgICAgICAgT3JpZ2luYWxOYW1lOiBbb3JpZ2luYWxGaXJzdE5hbWUsIG9yaWdpbmFsTGFzdE5hbWVdLFxuICAgICAgICAgICAgICAgIGlkOiBhcnRpc3RzSW5Sb3VuZFtrXS5faWQsXG4gICAgICAgICAgICAgICAgQXJ0aXN0SWQ6IGFydGlzdHNJblJvdW5kW2tdLkRldGFpbC5faWQsXG4gICAgICAgICAgICAgICAgSW1hZ2VzOiBhcnRpc3RzSW5Sb3VuZFtrXS5JbWFnZXMsXG4gICAgICAgICAgICAgICAgVmlkZW9zOiBhcnRpc3RzSW5Sb3VuZFtrXS5WaWRlb3MsXG4gICAgICAgICAgICAgICAgSXNXaW5uZXI6IGFydGlzdHNJblJvdW5kW2tdLklzV2lubmVyLFxuICAgICAgICAgICAgICAgIEVuYWJsZUF1Y3Rpb246IGFydGlzdHNJblJvdW5kW2tdLkVuYWJsZUF1Y3Rpb24sXG4gICAgICAgICAgICAgICAgSGFzVm90ZWQ6IGhhc1ZvdGVkLFxuICAgICAgICAgICAgICAgIENvbWJpbmVkOiBjb21iaW5lZC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhLk9yaWdpbmFsICYmIGIuT3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgcGFyc2VJbnQoYS5PcmlnaW5hbC5pZCwgMTYpIC0gcGFyc2VJbnQoYi5PcmlnaW5hbC5pZCwgMTYpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0OiBBcnRpc3RzSW5JbWFnZXMgPSB7XG4gICAgICAgIGFydGlzdHM6IGFydGlzdHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGEuRWFzZWxOdW1iZXIgLSBiLkVhc2VsTnVtYmVyO1xuICAgICAgICB9KSxcbiAgICAgICAgaGFzSW1hZ2VzOiBoYXNJbWFnZXNcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhcnRpc3RXaXNlSW1hZ2VzOyJdfQ==
