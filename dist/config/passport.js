"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJwtAuthorizedOptional = exports.isJwtAuthorized = exports.isAuthorized = exports.isAuthenticated = void 0;
const passport = require("passport");
const passportLocal = require("passport-local");
const passportFacebook = require("passport-facebook");
const _ = require("lodash");
const passportAnonymous = require("passport-anonymous");
const User_1 = require("../models/User");
const passport_jwt_1 = require("passport-jwt");
const Registration_1 = require("../models/Registration");
const Event_1 = require("../models/Event");
var fromExtractors = passport_jwt_1.ExtractJwt.fromExtractors;
const logger_1 = require("./logger");
const LocalStrategy = passportLocal.Strategy;
const FacebookStrategy = passportFacebook.Strategy;
passport.serializeUser((user, done) => {
    if (user && user.IsEventAdmin) {
        done(undefined, `reg_id${user.id}`);
    }
    else {
        done(undefined, `user_id${user.id}`);
    }
});
passport.deserializeUser((id, done) => {
    if (id.indexOf('user') > -1) {
        User_1.default.findById(id.replace('user_id', ''), (err, user) => {
            done(err, user);
        });
    }
    else {
        Registration_1.default.findById(id.replace('reg_id', ''), (err, user) => {
            done(err, user);
        });
    }
});
/**
 * Sign in using JWT
 * @param req
 */
const cookieExtractor = function (req) {
    let token = null;
    if (req && req.signedCookies) {
        token = req.signedCookies['jwt'];
    }
    return token;
};
const opts = {
    jwtFromRequest: fromExtractors([cookieExtractor, passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken()]),
    secretOrKey: process.env.JWT_SECRET,
};
passport.use(new passport_jwt_1.Strategy(opts, function (jwtPayload, done) {
    // logger.info('jwt_payload.sub', jwtPayload);
    Registration_1.default.findById(jwtPayload.registrationId, function (err, user) {
        if (err) {
            return done(err, false);
        }
        if (user) {
            const profile = user;
            profile.profile = {
                name: user.NickName || user.PhoneNumber,
                email: user.Email,
                picture: 'https://gravatar.com/avatar/9c822c080f177fca313624127446a9b7?s=200&d=retro'
            };
            return done(null, user);
        }
        else {
            return done(null, false);
            // or you could create a new account
        }
    });
}));
/**
 * Sign in using Email and Password.
 */
passport.use(new LocalStrategy({ usernameField: 'email' }, (email, password, done) => {
    User_1.default.findOne({ email: email.toLowerCase() }, (err, user) => {
        if (err) {
            return done(err);
        }
        if (!user) {
            return done(undefined, false, { message: `Email ${email} not found.` });
        }
        user.comparePassword(password, (err, isMatch) => {
            if (err) {
                return done(err);
            }
            if (isMatch) {
                return done(undefined, user);
            }
            return done(undefined, false, { message: 'Invalid email or password.' });
        });
    });
}));
/**
 * OAuth Strategy Overview
 *
 * - User is already logged in.
 *   - Check if there is an existing account with a provider id.
 *     - If there is, return an error message. (Account merging not supported)
 *     - Else link new OAuth account with currently logged-in user.
 * - User is not logged in.
 *   - Check if it's a returning user.
 *     - If returning user, sign in and we are done.
 *     - Else check if there is an existing account with user's email.
 *       - If there is, return an error message.
 *       - Else create a new account.
 */
/**
 * Sign in with Facebook.
 */
passport.use(new FacebookStrategy({
    clientID: process.env.FACEBOOK_ID,
    clientSecret: process.env.FACEBOOK_SECRET,
    callbackURL: '/auth/facebook/callback',
    profileFields: ['name', 'email', 'link', 'locale', 'timezone'],
    passReqToCallback: true
}, (req, accessToken, refreshToken, profile, done) => {
    if (req.user) {
        User_1.default.findOne({ facebook: profile.id }, (err, existingUser) => {
            if (err) {
                return done(err);
            }
            if (existingUser) {
                req.flash('errors', { msg: 'There is already a Facebook account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });
                done(err);
            }
            else {
                User_1.default.findById(req.user.id, (err, user) => {
                    if (err) {
                        return done(err);
                    }
                    user.facebook = profile.id;
                    user.tokens.push({ kind: 'facebook', accessToken });
                    user.profile.name = user.profile.name || `${profile.name.givenName} ${profile.name.familyName}`;
                    user.profile.gender = user.profile.gender || profile._json.gender;
                    user.profile.picture = user.profile.picture || `https://graph.facebook.com/${profile.id}/picture?type=large`;
                    user.save((err) => {
                        req.flash('info', { msg: 'Facebook account has been linked.' });
                        done(err, user);
                    });
                });
            }
        });
    }
    else {
        User_1.default.findOne({ facebook: profile.id }, (err, existingUser) => {
            if (err) {
                return done(err);
            }
            if (existingUser) {
                return done(undefined, existingUser);
            }
            User_1.default.findOne({ email: profile._json.email }, (err, existingEmailUser) => {
                if (err) {
                    return done(err);
                }
                if (existingEmailUser) {
                    req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with Facebook manually from Account Settings.' });
                    done(err);
                }
                else {
                    const user = new User_1.default();
                    user.email = profile._json.email;
                    user.facebook = profile.id;
                    user.tokens.push({ kind: 'facebook', accessToken });
                    user.profile.name = `${profile.name.givenName} ${profile.name.familyName}`;
                    user.profile.gender = profile._json.gender;
                    user.profile.picture = `https://graph.facebook.com/${profile.id}/picture?type=large`;
                    user.profile.location = (profile._json.location) ? profile._json.location.name : '';
                    user.save((err) => {
                        done(err, user);
                    });
                }
            });
        });
    }
}));
passport.use(new passportAnonymous.Strategy());
/**
 * Login Required middleware.
 */
exports.isAuthenticated = (req, res, next) => {
    if (req.isAuthenticated()) {
        return next();
    }
    else if (req.signedCookies && req.signedCookies.jwt && req.signedCookies.jwt.length > 0) {
        exports.isJwtAuthorizedOptional(req, res, next);
    }
    else {
        res.redirect(process.env.MP + '/login');
    }
};
/**
 * Authorization Required middleware.
 */
exports.isAuthorized = (req, res, next) => {
    const provider = req.path.split('/').slice(-1)[0];
    if (_.find(req.user.tokens, { kind: provider })) {
        next();
    }
    else {
        res.redirect(`/auth/${provider}`);
    }
};
exports.isJwtAuthorized = (req, res, next) => {
    const { headers: { cookie } } = req;
    if (cookie) {
        const values = cookie.split(';').reduce((res, item) => {
            const data = item.trim().split('=');
            return Object.assign(Object.assign({}, res), { [data[0]]: data[1] });
        }, {});
        console.log('cookies print', values);
    }
    else {
        console.log('no cookie');
    }
    passport.authenticate('jwt', { session: true }, function (err, user, info) {
        // If authentication failed, `user` will be set to false. If an exception occurred, `err` will be set.
        _processAuth(err, user, info, req, res, next);
    })(req, res, next);
};
exports.isJwtAuthorizedOptional = (req, res, next) => {
    passport.authenticate(['jwt', 'anonymous'], { session: true }, function (err, user, info) {
        // If authentication failed, `user` will be set to false. If an exception occurred, `err` will be set.
        _processAuth(err, user, info, req, res, next);
    })(req, res, next);
};
function _processAuth(err, user, info, req, res, next) {
    if (err || !user || _.isEmpty(user)) {
        // PASS THE ERROR OBJECT TO THE NEXT ROUTE i.e THE APP'S COMMON ERROR HANDLING MIDDLEWARE
        logger_1.default.info(`info.message', ${info && info.message}, 'info.name', ${info && info.name}`);
        return next({
            Success: false,
            status: 403,
            message: 'INVALID_TOKEN'
        });
    }
    else {
        req.logIn(user, (err) => {
            if (err) {
                return next(err);
            }
            else {
                const eventIds = [];
                const eventPromise = Event_1.default.find({
                    $and: [
                        {
                            'RegistrationsVoteFactor.Status': 'Admin',
                            'Enabled': true
                        }
                    ]
                }).select(['_id', 'RegistrationsVoteFactor']).sort({ _id: -1 });
                eventPromise.then((events) => {
                    for (let i = 0; i < events.length; i++) {
                        const event = events[i];
                        for (let j = 0; j < event.RegistrationsVoteFactor.length; j++) {
                            const voteFactor = event.RegistrationsVoteFactor[j];
                            if (voteFactor.RegistrationId.toString() === user._id.toString() && voteFactor.Status === 'Admin') {
                                eventIds.push(events[i]._id);
                                break;
                            }
                        }
                    }
                    // logger.info(`allowed admin of eventIds ${JSON.stringify(eventIds)} to ${JSON.stringify(req.user)}`);
                    req.user = user;
                    req.user.IsGuestUser = true;
                    if (eventIds.length > 0) {
                        req.user.IsEventAdmin = true;
                        req.user.eventIds = eventIds;
                    }
                    else {
                        req.user.IsEventAdmin = false;
                        req.user.eventIds = [];
                    }
                    return next();
                }).catch(e => {
                    logger_1.default.error(`${e.message} ${e.stack}`);
                    next(e);
                });
            }
        });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
