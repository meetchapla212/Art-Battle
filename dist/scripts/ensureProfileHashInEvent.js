"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bootstrap_1 = require("./bootstrap");
const Event_1 = require("../models/Event");
const Contestant_1 = require("../models/Contestant");
const logger_1 = require("../config/logger");
/* Forceful import */
logger_1.default.info(typeof bootstrap_1.default, typeof Contestant_1.default);
/* Forceful import end */
const Registration_1 = require("../models/Registration");
const VotingLog_1 = require("../models/VotingLog");
async function start() {
    const events = await Event_1.default.find({
        'Enabled': true
    }).sort({ _id: -1 });
    for (let i = 0; i < events.length; i++) {
        await updateEvent(events[i]);
    }
}
async function updateEvent(doc) {
    for (let i = 0; i < doc.RegistrationsVoteFactor.length; i++) {
        const regFactor = doc.RegistrationsVoteFactor[i];
        const regDoc = await Registration_1.default.findById(regFactor.RegistrationId);
        regFactor.Hash = regDoc.Hash;
        await VotingLog_1.default.updateMany({
            'PhoneNumber': regFactor.PhoneNumber,
        }, {
            '$set': {
                'PhoneHash': regFactor.Hash,
                'DisplayPhone': `*******${regFactor.PhoneNumber.slice(-4)}`
            }
        }).exec();
    }
    await doc.save();
}
start().then(() => {
    logger_1.default.info('fix done');
    process.exit(0);
}).catch(e => {
    logger_1.default.info(e);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvZW5zdXJlUHJvZmlsZUhhc2hJbkV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQW1DO0FBQ25DLDJDQUE0RDtBQUM1RCxxREFBbUQ7QUFDbkQsNkNBQXNDO0FBRXRDLHFCQUFxQjtBQUNyQixnQkFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLG1CQUFRLEVBQUUsT0FBTyxvQkFBZSxDQUFDLENBQUM7QUFDckQseUJBQXlCO0FBRXpCLHlEQUF3RDtBQUN4RCxtREFBaUQ7QUFHakQsS0FBSyxVQUFVLEtBQUs7SUFDaEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFVLENBQUMsSUFBSSxDQUFDO1FBQ2pDLFNBQVMsRUFBRSxJQUFJO0tBQ2xCLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2hDO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsR0FBa0I7SUFDekMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQWlCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMxRSxTQUFTLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDN0IsTUFBTSxtQkFBYyxDQUFDLFVBQVUsQ0FBQztZQUM1QixhQUFhLEVBQUUsU0FBUyxDQUFDLFdBQVc7U0FDdkMsRUFBRTtZQUNDLE1BQU0sRUFBRTtnQkFDSixXQUFXLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQzNCLGNBQWMsRUFBRSxVQUFVLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7YUFDOUQ7U0FDSixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDYjtJQUNELE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3JCLENBQUM7QUFFRCxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ2QsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDVCxnQkFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJzY3JpcHRzL2Vuc3VyZVByb2ZpbGVIYXNoSW5FdmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tICcuL2Jvb3RzdHJhcCc7XG5pbXBvcnQgRXZlbnRNb2RlbCwgeyBFdmVudERvY3VtZW50IH0gZnJvbSAnLi4vbW9kZWxzL0V2ZW50JztcbmltcG9ydCBDb250ZXN0YW50TW9kZWwgZnJvbSAnLi4vbW9kZWxzL0NvbnRlc3RhbnQnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcblxuLyogRm9yY2VmdWwgaW1wb3J0ICovXG5sb2dnZXIuaW5mbyh0eXBlb2YgbW9uZ29vc2UsIHR5cGVvZiBDb250ZXN0YW50TW9kZWwpO1xuLyogRm9yY2VmdWwgaW1wb3J0IGVuZCAqL1xuXG5pbXBvcnQgUmVnaXN0cmF0aW9uTW9kZWwgIGZyb20gJy4uL21vZGVscy9SZWdpc3RyYXRpb24nO1xuaW1wb3J0IFZvdGluZ0xvZ01vZGVsIGZyb20gJy4uL21vZGVscy9Wb3RpbmdMb2cnO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IEV2ZW50TW9kZWwuZmluZCh7XG4gICAgICAgICdFbmFibGVkJzogdHJ1ZVxuICAgIH0pLnNvcnQoe19pZDogLTF9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSAgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXdhaXQgdXBkYXRlRXZlbnQoZXZlbnRzW2ldKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUV2ZW50KGRvYzogRXZlbnREb2N1bWVudCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jLlJlZ2lzdHJhdGlvbnNWb3RlRmFjdG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHJlZ0ZhY3RvciA9IGRvYy5SZWdpc3RyYXRpb25zVm90ZUZhY3RvcltpXTtcbiAgICAgICAgY29uc3QgcmVnRG9jID0gYXdhaXQgUmVnaXN0cmF0aW9uTW9kZWwuZmluZEJ5SWQocmVnRmFjdG9yLlJlZ2lzdHJhdGlvbklkKTtcbiAgICAgICAgcmVnRmFjdG9yLkhhc2ggPSByZWdEb2MuSGFzaDtcbiAgICAgICAgYXdhaXQgVm90aW5nTG9nTW9kZWwudXBkYXRlTWFueSh7XG4gICAgICAgICAgICAnUGhvbmVOdW1iZXInOiByZWdGYWN0b3IuUGhvbmVOdW1iZXIsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICckc2V0Jzoge1xuICAgICAgICAgICAgICAgICdQaG9uZUhhc2gnOiByZWdGYWN0b3IuSGFzaCxcbiAgICAgICAgICAgICAgICAnRGlzcGxheVBob25lJzogYCoqKioqKioke3JlZ0ZhY3Rvci5QaG9uZU51bWJlci5zbGljZSgtNCl9YFxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5leGVjKCk7XG4gICAgfVxuICAgIGF3YWl0IGRvYy5zYXZlKCk7XG59XG5cbnN0YXJ0KCkudGhlbigoKSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oJ2ZpeCBkb25lJyk7XG4gICAgcHJvY2Vzcy5leGl0KDApO1xufSkuY2F0Y2goZSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oZSk7XG59KTsiXX0=
