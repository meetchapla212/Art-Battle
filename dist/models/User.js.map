{"version":3,"sources":["models/User.ts"],"names":[],"mappings":";;AAAA,wCAAwC;AACxC,iCAAiC;AACjC,qCAAqC;AA4BrC,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;IACrC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE;IACrC,QAAQ,EAAE,MAAM;IAChB,kBAAkB,EAAE,MAAM;IAC1B,oBAAoB,EAAE,IAAI;IAE1B,QAAQ,EAAE,MAAM;IAChB,OAAO,EAAE,MAAM;IACf,MAAM,EAAE,MAAM;IACd,MAAM,EAAE,KAAK;IAEb,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,MAAM;QACf,OAAO,EAAE,MAAM;KAChB;CACF,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;AAEzB;;GAEG;AACH,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,IAAI;IACvC,MAAM,IAAI,GAAG,IAAI,CAAC;IAClB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QAAE,OAAO,IAAI,EAAE,CAAC;KAAE;IACpD,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QAC/B,IAAI,GAAG,EAAE;YAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAAE;QAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,GAAmB,EAAE,IAAI,EAAE,EAAE;YACxE,IAAI,GAAG,EAAE;gBAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;aAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,UAAU,CAAC,OAAO,CAAC,eAAe,GAAG,UAAU,iBAAyB,EAAE,EAAkC;IAC1G,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAmB,EAAE,OAAgB,EAAE,EAAE;QACzF,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAGF;;GAEG;AACH,UAAU,CAAC,OAAO,CAAC,QAAQ,GAAG,UAAU,IAAY;IAClD,IAAI,CAAC,IAAI,EAAE;QACT,IAAI,GAAG,GAAG,CAAC;KACZ;IACD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;QACf,OAAO,kCAAkC,IAAI,UAAU,CAAC;KACzD;IACD,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtE,OAAO,+BAA+B,GAAG,MAAM,IAAI,UAAU,CAAC;AAChE,CAAC,CAAC;AAEF,8EAA8E;AAC9E,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAChD,kBAAe,IAAI,CAAC","file":"User.js","sourcesContent":["import * as bcrypt from 'bcrypt-nodejs';\r\nimport * as crypto from 'crypto';\r\nimport * as mongoose from 'mongoose';\r\n\r\nexport type UserModel = mongoose.Document & {\r\n  email: string,\r\n  password: string,\r\n  passwordResetToken: string,\r\n  passwordResetExpires: Date,\r\n\r\n  facebook: string,\r\n  tokens: AuthToken[],\r\n\r\n  profile: {\r\n    name: string,\r\n    gender: string,\r\n    location: string,\r\n    website: string,\r\n    picture: string\r\n  },\r\n\r\n  comparePassword: (candidatePassword: string, cb: (err: any, isMatch: any) => {}) => void,\r\n  gravatar: (size: number) => string\r\n};\r\n\r\nexport type AuthToken = {\r\n  accessToken: string,\r\n  kind: string\r\n};\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: { type: String, unique: true },\r\n  password: String,\r\n  passwordResetToken: String,\r\n  passwordResetExpires: Date,\r\n\r\n  facebook: String,\r\n  twitter: String,\r\n  google: String,\r\n  tokens: Array,\r\n\r\n  profile: {\r\n    name: String,\r\n    gender: String,\r\n    location: String,\r\n    website: String,\r\n    picture: String\r\n  }\r\n}, { timestamps: true });\r\n\r\n/**\r\n * Password hash middleware.\r\n */\r\nuserSchema.pre('save', function save(next) {\r\n  const user = this;\r\n  if (!user.isModified('password')) { return next(); }\r\n  bcrypt.genSalt(10, (err, salt) => {\r\n    if (err) { return next(err); }\r\n    bcrypt.hash(user.password, salt, undefined, (err: mongoose.Error, hash) => {\r\n      if (err) { return next(err); }\r\n      user.password = hash;\r\n      next();\r\n    });\r\n  });\r\n});\r\n\r\nuserSchema.methods.comparePassword = function (candidatePassword: string, cb: (err: any, isMatch: any) => {}) {\r\n  bcrypt.compare(candidatePassword, this.password, (err: mongoose.Error, isMatch: boolean) => {\r\n    cb(err, isMatch);\r\n  });\r\n};\r\n\r\n\r\n/**\r\n * Helper method for getting user's gravatar.\r\n */\r\nuserSchema.methods.gravatar = function (size: number) {\r\n  if (!size) {\r\n    size = 200;\r\n  }\r\n  if (!this.email) {\r\n    return `https://gravatar.com/avatar/?s=${size}&d=retro`;\r\n  }\r\n  const md5 = crypto.createHash('md5').update(this.email).digest('hex');\r\n  return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;\r\n};\r\n\r\n// export const User: UserType = mongoose.model<UserType>('User', userSchema);\r\nconst User = mongoose.model('User', userSchema);\r\nexport default User;"]}