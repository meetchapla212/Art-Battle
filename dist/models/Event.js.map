{"version":3,"sources":["models/Event.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAErC,iDAAoD;AAWpD,MAAM,qBAAqB,GAAoB,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC/D,IAAI,EAAE,MAAM;IACZ,gBAAgB,EAAE,MAAM;CAC3B,CAAC,CAAC;AAEH,MAAM,qBAAqB,GAAoB,IAAI,QAAQ,CAAC,MAAM,CAAC;IAC/D,IAAI,EAAE,MAAM;IACZ,gBAAgB,EAAE,MAAM;IACxB,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,cAAc,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;CACvF,CAAC,CAAC;AAEH,MAAM,WAAW,GAAoB,IAAI,QAAQ,CAAC,MAAM,CAAC;IACrD,WAAW,EAAE,MAAM;IACnB,WAAW,EAAE,CAAC,qBAAqB,CAAC;CACvC,CAAC,CAAC;AAEH,MAAM,WAAW,GAAoB,IAAI,QAAQ,CAAC,MAAM,CAAC;IACrD,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE;IACpC,WAAW,EAAE,CAAC,qBAAqB,CAAC;IACpC,MAAM,EAAE,CAAC,WAAW,CAAC;IACrB,WAAW,EAAE,MAAM;IACnB,aAAa,EAAE,CAAC,iCAAkB,CAAC;IACnC,YAAY,EAAE,WAAW;IACzB,OAAO,EAAE,OAAO;CACnB,CAAC,CAAC;AAEH,WAAW,CAAC,OAAO,CAAC,QAAQ,GAAG,UAAS,WAAmB;IACvD,OAAuB,IAAK,CAAC,YAAY,CAAC,WAAW;SAChD,MAAM,CAAC,CAAC,IAAc,EAAE,GAAuB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC;SACvG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;AACjD,CAAC,CAAC;AAEN,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAgB,OAAO,EAAE,WAAW,CAAC,CAAC;AACvE,kBAAe,UAAU,CAAC","file":"Event.js","sourcesContent":["import * as mongoose from 'mongoose';\r\n\r\nimport { RegistrationSchema } from './Registration';\r\nimport EventDTO from '../../../shared/EventDTO';\r\nimport RoundDTO from '../../../shared/RoundDTO';\r\nimport RoundContestantDTO from '../../../shared/ContestantDTO';\r\nimport RegistrationDTO from '../../../shared/RegistrationDTO';\r\n\r\n\r\nexport interface EventDocument extends EventDTO, mongoose.Document {\r\n    hasVoted(phoneNumber: string): boolean;\r\n}\r\n\r\nconst EventContestantSchema: mongoose.Schema = new mongoose.Schema({\r\n    Name: String,\r\n    ContestantNumber: Number,\r\n});\r\n\r\nconst RoundContestantSchema: mongoose.Schema = new mongoose.Schema({\r\n    Name: String,\r\n    ContestantNumber: Number,\r\n    Votes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Registration', unique: true }]\r\n});\r\n\r\nconst RoundSchema: mongoose.Schema = new mongoose.Schema({\r\n    RoundNumber: Number,\r\n    Contestants: [RoundContestantSchema]\r\n});\r\n\r\nconst EventSchema: mongoose.Schema = new mongoose.Schema({\r\n    Name: { type: String, unique: true },\r\n    Contestants: [EventContestantSchema],\r\n    Rounds: [RoundSchema],\r\n    PhoneNumber: String,\r\n    Registrations: [RegistrationSchema],\r\n    CurrentRound: RoundSchema,\r\n    Enabled: Boolean\r\n});\r\n\r\nEventSchema.methods.hasVoted = function(phoneNumber: string): boolean {\r\n    return (<EventDocument>this).CurrentRound.Contestants\r\n        .reduce((prev: string[], cur: RoundContestantDTO) => prev.concat(cur.Votes.map(v => v.PhoneNumber)), [])\r\n        .find(n => n === phoneNumber) ? true : false;\r\n    };\r\n\r\nconst EventModel = mongoose.model<EventDocument>('Event', EventSchema);\r\nexport default EventModel;"]}