"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uniqid = require('uniqid');
const bootstrap_1 = require("./bootstrap");
const Event_1 = require("../models/Event");
const Contestant_1 = require("../models/Contestant");
const google_libphonenumber_1 = require("google-libphonenumber");
const phoneUtil = google_libphonenumber_1.PhoneNumberUtil.getInstance();
const logger_1 = require("../config/logger");
/* Forceful import */
logger_1.default.info(typeof bootstrap_1.default, typeof Contestant_1.default);
/* Forceful import end */
const Registration_1 = require("../models/Registration");
const VotingLog_1 = require("../models/VotingLog");
const RegistrationLog_1 = require("../models/RegistrationLog");
async function start() {
    const registrations = await Registration_1.default.find({
        'Hash': {
            $exists: false
        },
        '$or': {
            '$in': {
                Hash: [null, '']
            }
        }
    }).sort({ _id: -1 });
    logger_1.default.info('ensure has registrations are ', registrations.length);
    for (let i = 0; i < registrations.length; i++) {
        await updateRegistration(registrations[i]);
    }
}
async function updateRegistration(doc) {
    const oldNumber = doc.PhoneNumber;
    if (doc.PhoneNumber && doc.PhoneNumber.length > 0
        && !doc.PhoneNumber.startsWith('+')) {
        doc.PhoneNumber = `+${oldNumber}`;
        logger_1.default.info(doc.PhoneNumber);
        try {
            doc.RegionCode = phoneUtil.getRegionCodeForNumber((phoneUtil.parse(doc.PhoneNumber)));
        }
        catch (e) {
            logger_1.default.info('Invalid number', doc.PhoneNumber);
            doc.RegionCode = 'US';
        }
        if (!doc.Hash) {
            doc.Hash = uniqid.time();
        }
        if (!doc.DisplayPhone) {
            doc.DisplayPhone = `*******${doc.PhoneNumber.slice(-4)}`;
        }
        logger_1.default.info('Registration updated');
        await doc.save();
        await Promise.all([
            _modifyRegLog(oldNumber, doc),
            _modifyVotingLog(oldNumber, doc),
            _modifyEventRegistrationVoteFactor(oldNumber, doc)
        ]);
    }
}
async function _modifyRegLog(oldNumber, newDoc) {
    const result = await RegistrationLog_1.default.updateMany({
        PhoneNumber: oldNumber,
    }, {
        '$set': {
            PhoneNumber: newDoc.PhoneNumber,
            DisplayPhone: newDoc.DisplayPhone,
            PhoneNumberHash: newDoc.Hash
        }
    });
    logger_1.default.info('Registration log updated', result);
}
async function _modifyVotingLog(oldNumber, newDoc) {
    const result = await VotingLog_1.default.updateMany({
        PhoneNumber: oldNumber,
    }, {
        '$set': {
            PhoneNumber: newDoc.PhoneNumber
        }
    });
    logger_1.default.info('Voting log updated', result);
}
async function _modifyEventRegistrationVoteFactor(oldNumber, newDoc) {
    const events = await Event_1.default.find({ 'RegistrationsVoteFactor.RegistrationId': newDoc.id });
    logger_1.default.info('events.length', events.length);
    for (let i = 0; i < events.length; i++) {
        for (let j = 0; j < events[i].RegistrationsVoteFactor.length; j++) {
            if (events[i].RegistrationsVoteFactor[j].RegistrationId === newDoc.id) {
                events[i].RegistrationsVoteFactor[j].PhoneNumber = newDoc.PhoneNumber;
                events[i].RegistrationsVoteFactor[j].Hash = newDoc.Hash;
                break;
            }
        }
        await events[i].save();
    }
    logger_1.default.info('Matching events updated', events.length);
}
start().then(() => {
    logger_1.default.info('streaming done');
    // process.exit(0);
}).catch(e => {
    logger_1.default.info(e);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
