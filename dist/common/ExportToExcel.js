"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportToExcelClass = void 0;
const path = require("path");
const fs = require('fs-extra');
const googleapis_1 = require("googleapis");
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];
const TOKEN_PATH = path.join(__dirname, `../data/google_sheets/token.json`);
const logger_1 = require("../config/logger");
const privateKey = require(`../data/google_sheets/${process.env.SERVICE_ACCOUNT_FILE}`);
exports.ExportToExcelClass = class ExportToExcel {
    constructor() {
        this.jwtClient = new googleapis_1.google.auth.JWT(privateKey.client_email, null, privateKey.private_key, ['https://www.googleapis.com/auth/spreadsheets']);
    }
    async insertInSheet(excelRows = [[]]) {
        const tokens = await this.jwtClient.authorize();
        this.jwtClient.setCredentials(tokens);
        googleapis_1.google.options({
            // @ts-ignore
            auth: this.jwtClient
        });
        /*const credentials = JSON.parse(await fs.readFile(path.join(__dirname, `../data/google_sheets/credentials.json`)));
        const {client_secret, client_id, redirect_uris} = credentials.installed;
        const oAuth2Client = new google.auth.OAuth2(
            client_id, client_secret, redirect_uris[0]);
        const token = await fs.readFile(TOKEN_PATH);
        oAuth2Client.setCredentials(JSON.parse(token));*/
        const result = await googleapis_1.google.sheets('v4').spreadsheets.values.append({
            // @ts-ignore
            // auth: oAuth2Client,
            range: 'A1',
            spreadsheetId: '1T4X2sEzmH_oEWEkzRFGTrcPLC2CfFvzYHkY0jppSpBk',
            includeValuesInResponse: true,
            insertDataOption: 'INSERT_ROWS',
            responseDateTimeRenderOption: 'FORMATTED_STRING',
            responseValueRenderOption: 'UNFORMATTED_VALUE',
            valueInputOption: 'RAW',
            resource: {
                values: excelRows
            }
        });
        logger_1.default.info(result);
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9FeHBvcnRUb0V4Y2VsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUE2QjtBQUU3QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDL0IsMkNBQW9DO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLENBQUMsOENBQThDLENBQUMsQ0FBQztBQUNoRSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDO0FBQzVFLDZDQUFzQztBQUV0QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMseUJBQXlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0FBRTNFLFFBQUEsa0JBQWtCLEdBQUcsTUFBTSxhQUFhO0lBdUNqRDtRQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxtQkFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ2hDLFVBQVUsQ0FBQyxZQUFZLEVBQ3ZCLElBQUksRUFDSixVQUFVLENBQUMsV0FBVyxFQUN0QixDQUFDLDhDQUE4QyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxZQUF5QixDQUFDLEVBQUUsQ0FBQztRQUM3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsbUJBQU0sQ0FBQyxPQUFPLENBQUM7WUFDWCxhQUFhO1lBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQ3ZCLENBQUMsQ0FBQztRQUVIOzs7Ozt5REFLaUQ7UUFDakQsTUFBTSxNQUFNLEdBQUcsTUFBTSxtQkFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNoRSxhQUFhO1lBQ2Isc0JBQXNCO1lBQ3RCLEtBQUssRUFBRSxJQUFJO1lBQ1gsYUFBYSxFQUFFLDhDQUE4QztZQUM3RCx1QkFBdUIsRUFBRSxJQUFJO1lBQzdCLGdCQUFnQixFQUFFLGFBQWE7WUFDL0IsNEJBQTRCLEVBQUUsa0JBQWtCO1lBQ2hELHlCQUF5QixFQUFFLG1CQUFtQjtZQUM5QyxnQkFBZ0IsRUFBRSxLQUFLO1lBQ3ZCLFFBQVEsRUFBRTtnQkFDTixNQUFNLEVBQUUsU0FBUzthQUNwQjtTQUNKLENBQUMsQ0FBQztRQUNILGdCQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Q0FDSixDQUFDIiwiZmlsZSI6ImNvbW1vbi9FeHBvcnRUb0V4Y2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHsgZ29vZ2xlIH0gZnJvbSAnZ29vZ2xlYXBpcyc7XG5jb25zdCBTQ09QRVMgPSBbJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvc3ByZWFkc2hlZXRzJ107XG5jb25zdCBUT0tFTl9QQVRIID0gcGF0aC5qb2luKF9fZGlybmFtZSwgYC4uL2RhdGEvZ29vZ2xlX3NoZWV0cy90b2tlbi5qc29uYCk7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuXG5jb25zdCBwcml2YXRlS2V5ID0gcmVxdWlyZShgLi4vZGF0YS9nb29nbGVfc2hlZXRzLyR7cHJvY2Vzcy5lbnYuU0VSVklDRV9BQ0NPVU5UX0ZJTEV9YCk7XG5cbmV4cG9ydCBjb25zdCBFeHBvcnRUb0V4Y2VsQ2xhc3MgPSBjbGFzcyBFeHBvcnRUb0V4Y2VsIHtcbiAgICAvKmFzeW5jIGluaXQoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCBgLi4vZGF0YS9nb29nbGVfc2hlZXRzL2NyZWRlbnRpYWxzLmpzb25gKSk7XG4gICAgICAgIGF3YWl0IEV4cG9ydFRvRXhjZWwuYXV0aG9yaXplKEpTT04ucGFyc2UoY29udGVudCksIHRoaXMuaW5zZXJ0SW5TaGVldCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldE5ld1Rva2VuKG9BdXRoMkNsaWVudDogeyBnZW5lcmF0ZUF1dGhVcmw6IChhcmcwOiB7IGFjY2Vzc190eXBlOiBzdHJpbmc7IHNjb3BlOiBzdHJpbmdbXSB9KSA9PiB2b2lkOyBnZXRUb2tlbjogKGFyZzA6IGFueSwgYXJnMTogKGVycjogYW55LCB0b2tlbjogYW55KSA9PiB2b2lkKSA9PiB2b2lkOyBzZXRDcmVkZW50aWFsczogKGFyZzA6IGFueSkgPT4gdm9pZCB9LCBjYWxsYmFjazogKG9BdXRoMkNsaWVudDogYW55KSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IGF1dGhVcmwgPSBvQXV0aDJDbGllbnQuZ2VuZXJhdGVBdXRoVXJsKHtcbiAgICAgICAgICAgIGFjY2Vzc190eXBlOiAnb2ZmbGluZScsXG4gICAgICAgICAgICBzY29wZTogU0NPUEVTLFxuICAgICAgICB9KTtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0F1dGhvcml6ZSB0aGlzIGFwcCBieSB2aXNpdGluZyB0aGlzIHVybDonLCBhdXRoVXJsKTtcbiAgICAgICAgb0F1dGgyQ2xpZW50LmdldFRva2VuKCc8cHV0IGNvZGUgb2J0YWluZWQgYnkgbGluayBoZXJlPicsIChlcnI6IGFueSwgdG9rZW46IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHdoaWxlIHRyeWluZyB0byByZXRyaWV2ZSBhY2Nlc3MgdG9rZW4nLCBlcnIpO1xuICAgICAgICAgICAgb0F1dGgyQ2xpZW50LnNldENyZWRlbnRpYWxzKHRva2VuKTtcbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSB0b2tlbiB0byBkaXNrIGZvciBsYXRlciBwcm9ncmFtIGV4ZWN1dGlvbnNcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZShUT0tFTl9QQVRILCBKU09OLnN0cmluZ2lmeSh0b2tlbiksIChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ1Rva2VuIHN0b3JlZCB0bycsIFRPS0VOX1BBVEgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWxsYmFjayhvQXV0aDJDbGllbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgYXV0aG9yaXplKGNyZWRlbnRpYWxzOiB7IGluc3RhbGxlZDogeyBjbGllbnRfc2VjcmV0OiBhbnk7IGNsaWVudF9pZDogYW55OyByZWRpcmVjdF91cmlzOiBhbnkgfSB9LCBjYWxsYmFjazogKG9BdXRoMkNsaWVudDogYW55KSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IHtjbGllbnRfc2VjcmV0LCBjbGllbnRfaWQsIHJlZGlyZWN0X3VyaXN9ID0gY3JlZGVudGlhbHMuaW5zdGFsbGVkO1xuICAgICAgICBjb25zdCBvQXV0aDJDbGllbnQgPSBuZXcgZ29vZ2xlLmF1dGguT0F1dGgyKFxuICAgICAgICAgICAgY2xpZW50X2lkLCBjbGllbnRfc2VjcmV0LCByZWRpcmVjdF91cmlzWzBdKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgcHJldmlvdXNseSBzdG9yZWQgYSB0b2tlbi5cbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgZnMucmVhZEZpbGUoVE9LRU5fUEFUSCk7XG4gICAgICAgICAgICBvQXV0aDJDbGllbnQuc2V0Q3JlZGVudGlhbHMoSlNPTi5wYXJzZSh0b2tlbikpO1xuICAgICAgICAgICAgY2FsbGJhY2sob0F1dGgyQ2xpZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIEV4cG9ydFRvRXhjZWwuZ2V0TmV3VG9rZW4ob0F1dGgyQ2xpZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9Ki9cbiAgICBwdWJsaWMgand0Q2xpZW50OiB7IGF1dGhvcml6ZTogKCkgPT4gdm9pZDsgc2V0Q3JlZGVudGlhbHM6IChhcmcwOiBhbnkpID0+IHZvaWQ7IH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5qd3RDbGllbnQgPSBuZXcgZ29vZ2xlLmF1dGguSldUKFxuICAgICAgICAgICAgcHJpdmF0ZUtleS5jbGllbnRfZW1haWwsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcHJpdmF0ZUtleS5wcml2YXRlX2tleSxcbiAgICAgICAgICAgIFsnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9zcHJlYWRzaGVldHMnXSk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5zZXJ0SW5TaGVldChleGNlbFJvd3M6IFtzdHJpbmdbXT9dID0gW1tdXSkge1xuICAgICAgICBjb25zdCB0b2tlbnMgPSBhd2FpdCB0aGlzLmp3dENsaWVudC5hdXRob3JpemUoKTtcbiAgICAgICAgdGhpcy5qd3RDbGllbnQuc2V0Q3JlZGVudGlhbHModG9rZW5zKTtcbiAgICAgICAgZ29vZ2xlLm9wdGlvbnMoe1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgYXV0aDogdGhpcy5qd3RDbGllbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLypjb25zdCBjcmVkZW50aWFscyA9IEpTT04ucGFyc2UoYXdhaXQgZnMucmVhZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgYC4uL2RhdGEvZ29vZ2xlX3NoZWV0cy9jcmVkZW50aWFscy5qc29uYCkpKTtcbiAgICAgICAgY29uc3Qge2NsaWVudF9zZWNyZXQsIGNsaWVudF9pZCwgcmVkaXJlY3RfdXJpc30gPSBjcmVkZW50aWFscy5pbnN0YWxsZWQ7XG4gICAgICAgIGNvbnN0IG9BdXRoMkNsaWVudCA9IG5ldyBnb29nbGUuYXV0aC5PQXV0aDIoXG4gICAgICAgICAgICBjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQsIHJlZGlyZWN0X3VyaXNbMF0pO1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGZzLnJlYWRGaWxlKFRPS0VOX1BBVEgpO1xuICAgICAgICBvQXV0aDJDbGllbnQuc2V0Q3JlZGVudGlhbHMoSlNPTi5wYXJzZSh0b2tlbikpOyovXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdvb2dsZS5zaGVldHMoJ3Y0Jykuc3ByZWFkc2hlZXRzLnZhbHVlcy5hcHBlbmQoe1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgLy8gYXV0aDogb0F1dGgyQ2xpZW50LFxuICAgICAgICAgICAgcmFuZ2U6ICdBMScsXG4gICAgICAgICAgICBzcHJlYWRzaGVldElkOiAnMVQ0WDJzRXptSF9vRVdFa3pSRkdUcmNQTEMyQ2ZGdnpZSGtZMGpwcFNwQmsnLFxuICAgICAgICAgICAgaW5jbHVkZVZhbHVlc0luUmVzcG9uc2U6IHRydWUsXG4gICAgICAgICAgICBpbnNlcnREYXRhT3B0aW9uOiAnSU5TRVJUX1JPV1MnLFxuICAgICAgICAgICAgcmVzcG9uc2VEYXRlVGltZVJlbmRlck9wdGlvbjogJ0ZPUk1BVFRFRF9TVFJJTkcnLFxuICAgICAgICAgICAgcmVzcG9uc2VWYWx1ZVJlbmRlck9wdGlvbjogJ1VORk9STUFUVEVEX1ZBTFVFJyxcbiAgICAgICAgICAgIHZhbHVlSW5wdXRPcHRpb246ICdSQVcnLFxuICAgICAgICAgICAgcmVzb3VyY2U6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IGV4Y2VsUm93c1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbG9nZ2VyLmluZm8ocmVzdWx0KTtcbiAgICB9XG59O1xuXG5cbiJdfQ==
