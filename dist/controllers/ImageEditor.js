"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.editImages = void 0;
const Event_1 = require("../models/Event");
const Lot_1 = require("../models/Lot");
const ArtistWiseImages_1 = require("../common/ArtistWiseImages");
exports.editImages = async (req, res, next) => {
    try {
        const eventDoc = await Event_1.default.findOne({
            '_id': req.params.eventId,
        }).select(['Name', 'EID', 'Description', '_id', 'VoteByLink', 'Rounds', 'CurrentRound', 'RegistrationsVoteFactor', 'Contestants', 'Images', 'EnableAuction'])
            .populate('Rounds.Contestants.Detail')
            .populate('Country');
        if (!eventDoc) {
            return next(new Error('Invalid Event'));
        }
        const openAuctionCount = await Lot_1.default.countDocuments({
            'Event': eventDoc._id,
            'Status': 1
        });
        const totalRounds = eventDoc.Rounds.length;
        const currentRound = eventDoc.CurrentRound;
        let currentRoundNumber = currentRound && currentRound.RoundNumber;
        let currentRoundIndex;
        const roundWiseImages = [];
        for (let j = 0; j < totalRounds; j++) {
            const artistsInRound = eventDoc.Rounds[j].Contestants;
            const artistsImages = ArtistWiseImages_1.default(artistsInRound);
            const response = {
                EventId: eventDoc.id,
                EID: eventDoc.EID,
                RoundNumber: eventDoc.Rounds[j].RoundNumber,
                Artists: artistsImages.artists,
                IsCurrentRound: currentRoundNumber === eventDoc.Rounds[j].RoundNumber,
                HasOpenRound: !eventDoc.Rounds[j].IsFinished,
                HasImages: artistsImages.hasImages,
                EnableAuction: eventDoc.EnableAuction
            };
            roundWiseImages.push(response);
            if (eventDoc.Rounds[j].RoundNumber === currentRoundNumber) {
                currentRoundIndex = j;
            }
        }
        if (!currentRoundNumber) {
            currentRoundNumber = 0;
        }
        res.render('ImageEditor/editor', {
            title: eventDoc.Name,
            Description: eventDoc.Description,
            countryFlag: eventDoc.Country && eventDoc.Country.country_image,
            roundWiseImages: roundWiseImages,
            CurrentRoundNumber: currentRoundNumber,
            openAuctionCount: openAuctionCount,
            EID: eventDoc.EID
        });
    }
    catch (e) {
        next(e);
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL0ltYWdlRWRpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDJDQUF3RDtBQUN4RCx1Q0FBcUM7QUFDckMsaUVBQTBEO0FBRzdDLFFBQUEsVUFBVSxHQUFHLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtJQUNoRixJQUFJO1FBQ0EsTUFBTSxRQUFRLEdBQUcsTUFBTSxlQUFVLENBQUMsT0FBTyxDQUFDO1lBQ3RDLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU87U0FDNUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSx5QkFBeUIsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO2FBQ3hKLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQzthQUNyQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFDRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sYUFBUSxDQUFDLGNBQWMsQ0FBQztZQUNuRCxPQUFPLEVBQUUsUUFBUSxDQUFDLEdBQUc7WUFDckIsUUFBUSxFQUFFLENBQUM7U0FDZCxDQUFDLENBQUM7UUFDSCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMzQyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDO1FBQzNDLElBQUksa0JBQWtCLEdBQUcsWUFBWSxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDbEUsSUFBSSxpQkFBeUIsQ0FBQztRQUM5QixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFDM0IsS0FBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRztZQUNwQyxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztZQUN0RCxNQUFNLGFBQWEsR0FBRywwQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN2RCxNQUFNLFFBQVEsR0FBMEI7Z0JBQ3BDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDcEIsR0FBRyxFQUFFLFFBQVEsQ0FBQyxHQUFHO2dCQUNqQixXQUFXLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXO2dCQUMzQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU87Z0JBQzlCLGNBQWMsRUFBRSxrQkFBa0IsS0FBSyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7Z0JBQ3JFLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVTtnQkFDNUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxTQUFTO2dCQUNsQyxhQUFhLEVBQUUsUUFBUSxDQUFDLGFBQWE7YUFDeEMsQ0FBQztZQUNGLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDL0IsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyxrQkFBa0IsRUFBRTtnQkFDdkQsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO2FBQ3pCO1NBQ0o7UUFDRCxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDckIsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTtZQUM3QixLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUk7WUFDcEIsV0FBVyxFQUFFLFFBQVEsQ0FBQyxXQUFXO1lBQ2pDLFdBQVcsRUFBRSxRQUFRLENBQUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYTtZQUMvRCxlQUFlLEVBQUUsZUFBZTtZQUNoQyxrQkFBa0IsRUFBRSxrQkFBa0I7WUFDdEMsZ0JBQWdCLEVBQUUsZ0JBQWdCO1lBQ2xDLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRztTQUNwQixDQUFDLENBQUM7S0FDTjtJQUNELE9BQU8sQ0FBQyxFQUFFO1FBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ1g7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvSW1hZ2VFZGl0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEV2ZW50TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvRXZlbnQnO1xuaW1wb3J0IExvdE1vZGVsIGZyb20gJy4uL21vZGVscy9Mb3QnO1xuaW1wb3J0IGFydGlzdFdpc2VJbWFnZXMgZnJvbSAnLi4vY29tbW9uL0FydGlzdFdpc2VJbWFnZXMnO1xuaW1wb3J0IHsgUm91bmRBcnRpc3RzSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL0FydGlzdEltYWdlRFRPJztcblxuZXhwb3J0IGNvbnN0IGVkaXRJbWFnZXMgPSBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBldmVudERvYyA9IGF3YWl0IEV2ZW50TW9kZWwuZmluZE9uZSh7XG4gICAgICAgICAgICAnX2lkJzogcmVxLnBhcmFtcy5ldmVudElkLFxuICAgICAgICB9KS5zZWxlY3QoWydOYW1lJywgJ0VJRCcsICdEZXNjcmlwdGlvbicsICdfaWQnLCAnVm90ZUJ5TGluaycsICdSb3VuZHMnLCAnQ3VycmVudFJvdW5kJywgJ1JlZ2lzdHJhdGlvbnNWb3RlRmFjdG9yJywgJ0NvbnRlc3RhbnRzJywgJ0ltYWdlcycsICdFbmFibGVBdWN0aW9uJ10pXG4gICAgICAgICAgICAucG9wdWxhdGUoJ1JvdW5kcy5Db250ZXN0YW50cy5EZXRhaWwnKVxuICAgICAgICAgICAgLnBvcHVsYXRlKCdDb3VudHJ5Jyk7XG4gICAgICAgIGlmICghZXZlbnREb2MpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KG5ldyBFcnJvcignSW52YWxpZCBFdmVudCcpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcGVuQXVjdGlvbkNvdW50ID0gYXdhaXQgTG90TW9kZWwuY291bnREb2N1bWVudHMoe1xuICAgICAgICAgICAgJ0V2ZW50JzogZXZlbnREb2MuX2lkLFxuICAgICAgICAgICAgJ1N0YXR1cyc6IDFcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRvdGFsUm91bmRzID0gZXZlbnREb2MuUm91bmRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY3VycmVudFJvdW5kID0gZXZlbnREb2MuQ3VycmVudFJvdW5kO1xuICAgICAgICBsZXQgY3VycmVudFJvdW5kTnVtYmVyID0gY3VycmVudFJvdW5kICYmIGN1cnJlbnRSb3VuZC5Sb3VuZE51bWJlcjtcbiAgICAgICAgbGV0IGN1cnJlbnRSb3VuZEluZGV4OiBudW1iZXI7XG4gICAgICAgIGNvbnN0IHJvdW5kV2lzZUltYWdlcyA9IFtdO1xuICAgICAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCB0b3RhbFJvdW5kczsgaisrICkge1xuICAgICAgICAgICAgY29uc3QgYXJ0aXN0c0luUm91bmQgPSBldmVudERvYy5Sb3VuZHNbal0uQ29udGVzdGFudHM7XG4gICAgICAgICAgICBjb25zdCBhcnRpc3RzSW1hZ2VzID0gYXJ0aXN0V2lzZUltYWdlcyhhcnRpc3RzSW5Sb3VuZCk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZTogUm91bmRBcnRpc3RzSW50ZXJmYWNlID0ge1xuICAgICAgICAgICAgICAgIEV2ZW50SWQ6IGV2ZW50RG9jLmlkLFxuICAgICAgICAgICAgICAgIEVJRDogZXZlbnREb2MuRUlELFxuICAgICAgICAgICAgICAgIFJvdW5kTnVtYmVyOiBldmVudERvYy5Sb3VuZHNbal0uUm91bmROdW1iZXIsXG4gICAgICAgICAgICAgICAgQXJ0aXN0czogYXJ0aXN0c0ltYWdlcy5hcnRpc3RzLFxuICAgICAgICAgICAgICAgIElzQ3VycmVudFJvdW5kOiBjdXJyZW50Um91bmROdW1iZXIgPT09IGV2ZW50RG9jLlJvdW5kc1tqXS5Sb3VuZE51bWJlcixcbiAgICAgICAgICAgICAgICBIYXNPcGVuUm91bmQ6ICFldmVudERvYy5Sb3VuZHNbal0uSXNGaW5pc2hlZCxcbiAgICAgICAgICAgICAgICBIYXNJbWFnZXM6IGFydGlzdHNJbWFnZXMuaGFzSW1hZ2VzLFxuICAgICAgICAgICAgICAgIEVuYWJsZUF1Y3Rpb246IGV2ZW50RG9jLkVuYWJsZUF1Y3Rpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByb3VuZFdpc2VJbWFnZXMucHVzaChyZXNwb25zZSk7XG4gICAgICAgICAgICBpZiAoZXZlbnREb2MuUm91bmRzW2pdLlJvdW5kTnVtYmVyID09PSBjdXJyZW50Um91bmROdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Um91bmRJbmRleCA9IGo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdXJyZW50Um91bmROdW1iZXIpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSb3VuZE51bWJlciA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnJlbmRlcignSW1hZ2VFZGl0b3IvZWRpdG9yJywge1xuICAgICAgICAgICAgdGl0bGU6IGV2ZW50RG9jLk5hbWUsXG4gICAgICAgICAgICBEZXNjcmlwdGlvbjogZXZlbnREb2MuRGVzY3JpcHRpb24sXG4gICAgICAgICAgICBjb3VudHJ5RmxhZzogZXZlbnREb2MuQ291bnRyeSAmJiBldmVudERvYy5Db3VudHJ5LmNvdW50cnlfaW1hZ2UsXG4gICAgICAgICAgICByb3VuZFdpc2VJbWFnZXM6IHJvdW5kV2lzZUltYWdlcyxcbiAgICAgICAgICAgIEN1cnJlbnRSb3VuZE51bWJlcjogY3VycmVudFJvdW5kTnVtYmVyLFxuICAgICAgICAgICAgb3BlbkF1Y3Rpb25Db3VudDogb3BlbkF1Y3Rpb25Db3VudCxcbiAgICAgICAgICAgIEVJRDogZXZlbnREb2MuRUlEXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBuZXh0KGUpO1xuICAgIH1cbn07Il19
