"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendNotificationIgnoreErr = void 0;
const apn = require("apn");
const path = require("path");
const logger_1 = require("../config/logger");
let service = {};
try {
    service = new apn.Provider({
        token: {
            key: path.join(__dirname, `../data/apns/${process.env.APNS_TOKEN_KEY}`),
            keyId: process.env.APNS_TOKEN_KEY_ID,
            teamId: process.env.APNS_TEAM_ID
        },
        production: process.env.APNS_ENV && process.env.APNS_ENV === 'prod'
    });
}
catch (e) {
    logger_1.default.info(e);
}
async function sendNotification(tokens, text, title, payload) {
    const note = new apn.Notification();
    note.payload = payload;
    // @ts-ignore
    note.body = text;
    note.topic = 'com.dev.artbattle';
    logger_1.default.info(`Sending: ${JSON.stringify(note)} to ${tokens}`);
    // @ts-ignore
    const result = await service.send(note, tokens);
    logger_1.default.info(`sent: ${result.sent.length}`);
    logger_1.default.info(`failed: ${result.failed.length}`);
    logger_1.default.info(result.failed);
    return result.failed;
}
async function sendNotificationIgnoreErr(tokens, text, title, payload) {
    try {
        return await sendNotification(tokens, text, title, payload);
    }
    catch (e) {
        logger_1.default.info(`${e.message} ${e.stack}`);
    }
}
exports.sendNotificationIgnoreErr = sendNotificationIgnoreErr;
exports.default = sendNotification;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9BcG5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFDN0IsNkNBQXNDO0FBRXRDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNqQixJQUFJO0lBQ0EsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUN2QixLQUFLLEVBQUU7WUFDSCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCO1lBQ3BDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7U0FDbkM7UUFDRCxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTTtLQUN0RSxDQUFDLENBQUM7Q0FDTjtBQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQ1IsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDbEI7QUFFRCxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsTUFBZ0IsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLE9BQWE7SUFDeEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDdkIsYUFBYTtJQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBRWpCLElBQUksQ0FBQyxLQUFLLEdBQUcsbUJBQW1CLENBQUM7SUFFakMsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDN0QsYUFBYTtJQUNiLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUMsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDM0MsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDL0MsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUN6QixDQUFDO0FBRU0sS0FBSyxVQUFVLHlCQUF5QixDQUFDLE1BQWdCLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxPQUFhO0lBQ3hHLElBQUk7UUFDQSxPQUFPLE1BQU0sZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDL0Q7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLGdCQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUMxQztBQUNMLENBQUM7QUFORCw4REFNQztBQUVELGtCQUFlLGdCQUFnQixDQUFDIiwiZmlsZSI6ImNvbW1vbi9BcG5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBuIGZyb20gJ2Fwbic7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcblxubGV0IHNlcnZpY2UgPSB7fTtcbnRyeSB7XG4gICAgc2VydmljZSA9IG5ldyBhcG4uUHJvdmlkZXIoe1xuICAgICAgICB0b2tlbjoge1xuICAgICAgICAgICAga2V5OiBwYXRoLmpvaW4oX19kaXJuYW1lLCBgLi4vZGF0YS9hcG5zLyR7cHJvY2Vzcy5lbnYuQVBOU19UT0tFTl9LRVl9YCksXG4gICAgICAgICAgICBrZXlJZDogcHJvY2Vzcy5lbnYuQVBOU19UT0tFTl9LRVlfSUQsXG4gICAgICAgICAgICB0ZWFtSWQ6IHByb2Nlc3MuZW52LkFQTlNfVEVBTV9JRFxuICAgICAgICB9LFxuICAgICAgICBwcm9kdWN0aW9uOiBwcm9jZXNzLmVudi5BUE5TX0VOViAmJiBwcm9jZXNzLmVudi5BUE5TX0VOViA9PT0gJ3Byb2QnXG4gICAgfSk7XG59IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmluZm8oZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmROb3RpZmljYXRpb24odG9rZW5zOiBTdHJpbmdbXSwgdGV4dDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCBwYXlsb2FkPzogYW55KSB7XG4gICAgY29uc3Qgbm90ZSA9IG5ldyBhcG4uTm90aWZpY2F0aW9uKCk7XG4gICAgbm90ZS5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbm90ZS5ib2R5ID0gdGV4dDtcblxuICAgIG5vdGUudG9waWMgPSAnY29tLmRldi5hcnRiYXR0bGUnO1xuXG4gICAgbG9nZ2VyLmluZm8oYFNlbmRpbmc6ICR7SlNPTi5zdHJpbmdpZnkobm90ZSl9IHRvICR7dG9rZW5zfWApO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLnNlbmQobm90ZSwgdG9rZW5zKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oYHNlbnQ6ICR7cmVzdWx0LnNlbnQubGVuZ3RofWApO1xuICAgICAgICBsb2dnZXIuaW5mbyhgZmFpbGVkOiAke3Jlc3VsdC5mYWlsZWQubGVuZ3RofWApO1xuICAgICAgICBsb2dnZXIuaW5mbyhyZXN1bHQuZmFpbGVkKTtcbiAgICByZXR1cm4gcmVzdWx0LmZhaWxlZDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmROb3RpZmljYXRpb25JZ25vcmVFcnIodG9rZW5zOiBTdHJpbmdbXSwgdGV4dDogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCBwYXlsb2FkPzogYW55KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHNlbmROb3RpZmljYXRpb24odG9rZW5zLCB0ZXh0LCB0aXRsZSwgcGF5bG9hZCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dnZXIuaW5mbyhgJHtlLm1lc3NhZ2V9ICR7ZS5zdGFja31gKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNlbmROb3RpZmljYXRpb247Il19
