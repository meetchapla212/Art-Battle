"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processMessage = void 0;
const Message_1 = require("../models/Message");
const Registration_1 = require("../models/Registration");
const logger_1 = require("../config/logger");
const Event_1 = require("../models/Event");
const Slack_1 = require("./Slack");
exports.processMessage = async (body, from, to, res) => {
    // FETCH USERID
    // INSERTION
    const userData = await Registration_1.default.find({ 'PhoneNumber': from }).select([
        '_id', 'NickName', 'FirstName', 'PhoneNumber'
    ]);
    if (userData[0]) {
        if (body.trim().toLowerCase() === 'stop') {
            // auto block user
            userData[0].MessageBlocked = 1;
            await userData[0].save();
        }
        const MessageObj = new Message_1.default();
        MessageObj.Message = body;
        // MessageObj.ServerUser = userData[0]._id;
        // MessageObj.ServerRegistration = userData[0]._id;
        MessageObj.ServerNumber = to;
        MessageObj.ServerNumberDoc = userData[0]._id;
        MessageObj.ClientPhoneNumber = from;
        MessageObj.ClientRegistration = userData[0]._id;
        MessageObj.Status = 0; // Receive from USER
        MessageObj.Channel = 'SMS';
        const savedMessage = await MessageObj.save();
        let lastEventTitle = '';
        const event = await Event_1.default.findOne({
            Registrations: userData[0]._id
        }).sort({ _id: -1 });
        if (event) {
            lastEventTitle = `last event ${event.Name}`;
        }
        // return res.send(`<Response><Sms>We have received your message, we will get back to you soon</Sms></Response>`);
        res.send(`<Response>We have received your message, we will get back to you soon</Response>`);
        Slack_1.postPeopleMessageToSlack({
            'text': `\`\`\` ${body} \`\`\`
from ${userData[0].NickName || userData[0].FirstName || userData[0].PhoneNumber} - <${process.env.SITE_URL}/p/${userData[0].PhoneNumber}|reply to ${to}> ${lastEventTitle}`,
            'mrkdwn': true
        }).catch(() => logger_1.default.info('people message slack call failed ', body));
    }
    else {
        Slack_1.postPeopleMessageToSlack({
            'text': `\`${body}\` /n This came from unregistered number ${from}`,
            mrkdwn: true
        }).catch(() => logger_1.default.info('people message slack call failed ', body));
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9tZXNzYWdlUHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLCtDQUE2RDtBQUM3RCx5REFBdUQ7QUFDdkQsNkNBQXNDO0FBQ3RDLDJDQUF5QztBQUN6QyxtQ0FBbUQ7QUFDdEMsUUFBQSxjQUFjLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsRUFBVSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBRTFGLGVBQWU7SUFDZixZQUFZO0lBQ1osTUFBTSxRQUFRLEdBQUcsTUFBTSxzQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBQyxhQUFhLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDeEUsS0FBSyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsYUFBYTtLQUMvQyxDQUFDLENBQUM7SUFDSixJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNiLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sRUFBRTtZQUN0QyxrQkFBa0I7WUFDbEIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7WUFDL0IsTUFBTSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDNUI7UUFDRCxNQUFNLFVBQVUsR0FBRyxJQUFJLGlCQUFhLEVBQUUsQ0FBQztRQUN2QyxVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUMxQiwyQ0FBMkM7UUFDM0MsbURBQW1EO1FBQ25ELFVBQVUsQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQzdCLFVBQVUsQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUM3QyxVQUFVLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQ3BDLFVBQVUsQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ2hELFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsb0JBQW9CO1FBQzNDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO1FBQzFCLE1BQU0sWUFBWSxHQUFHLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN4QixNQUFNLEtBQUssR0FBRyxNQUFNLGVBQVUsQ0FBQyxPQUFPLENBQUM7WUFDbkMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO1NBQ2pDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ25CLElBQUksS0FBSyxFQUFFO1lBQ1AsY0FBYyxHQUFHLGNBQWMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQy9DO1FBRUQsa0hBQWtIO1FBQ2xILEdBQUcsQ0FBQyxJQUFJLENBQUMsa0ZBQWtGLENBQUMsQ0FBQztRQUM3RixnQ0FBd0IsQ0FBQztZQUNyQixNQUFNLEVBQUUsVUFBVSxJQUFJO09BQzNCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLGFBQWEsRUFBRSxLQUFLLGNBQWMsRUFBRTtZQUMvSixRQUFRLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFNLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDMUU7U0FBTTtRQUNILGdDQUF3QixDQUFDO1lBQ3JCLE1BQU0sRUFBRSxLQUFLLElBQUksNENBQTRDLElBQUksRUFBRTtZQUNuRSxNQUFNLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsbUNBQW1DLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUMxRTtBQUNMLENBQUMsQ0FBQyIsImZpbGUiOiJjb21tb24vbWVzc2FnZVByb2Nlc3Nvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1lc3NhZ2VTY2hlbWEgfSBmcm9tICcuLi9tb2RlbHMvTWVzc2FnZSc7XG5pbXBvcnQgUmVnaXN0cmF0aW9uTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1JlZ2lzdHJhdGlvbic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IEV2ZW50TW9kZWwgZnJvbSAnLi4vbW9kZWxzL0V2ZW50JztcbmltcG9ydCB7IHBvc3RQZW9wbGVNZXNzYWdlVG9TbGFjayB9IGZyb20gJy4vU2xhY2snO1xuZXhwb3J0IGNvbnN0IHByb2Nlc3NNZXNzYWdlID0gYXN5bmMgKGJvZHk6IHN0cmluZywgZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCByZXM6IFJlc3BvbnNlKSA9PiB7XG5cbiAgICAvLyBGRVRDSCBVU0VSSURcbiAgICAvLyBJTlNFUlRJT05cbiAgICBjb25zdCB1c2VyRGF0YSA9IGF3YWl0IFJlZ2lzdHJhdGlvbk1vZGVsLmZpbmQoeydQaG9uZU51bWJlcic6IGZyb219KS5zZWxlY3QoW1xuICAgICAgICAnX2lkJywgJ05pY2tOYW1lJywgJ0ZpcnN0TmFtZScsICdQaG9uZU51bWJlcidcbiAgICAgXSk7XG4gICAgaWYgKHVzZXJEYXRhWzBdKSB7XG4gICAgICAgIGlmIChib2R5LnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSAnc3RvcCcpIHtcbiAgICAgICAgICAgIC8vIGF1dG8gYmxvY2sgdXNlclxuICAgICAgICAgICAgdXNlckRhdGFbMF0uTWVzc2FnZUJsb2NrZWQgPSAxO1xuICAgICAgICAgICAgYXdhaXQgdXNlckRhdGFbMF0uc2F2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IE1lc3NhZ2VPYmogPSBuZXcgTWVzc2FnZVNjaGVtYSgpO1xuICAgICAgICBNZXNzYWdlT2JqLk1lc3NhZ2UgPSBib2R5O1xuICAgICAgICAvLyBNZXNzYWdlT2JqLlNlcnZlclVzZXIgPSB1c2VyRGF0YVswXS5faWQ7XG4gICAgICAgIC8vIE1lc3NhZ2VPYmouU2VydmVyUmVnaXN0cmF0aW9uID0gdXNlckRhdGFbMF0uX2lkO1xuICAgICAgICBNZXNzYWdlT2JqLlNlcnZlck51bWJlciA9IHRvO1xuICAgICAgICBNZXNzYWdlT2JqLlNlcnZlck51bWJlckRvYyA9IHVzZXJEYXRhWzBdLl9pZDtcbiAgICAgICAgTWVzc2FnZU9iai5DbGllbnRQaG9uZU51bWJlciA9IGZyb207XG4gICAgICAgIE1lc3NhZ2VPYmouQ2xpZW50UmVnaXN0cmF0aW9uID0gdXNlckRhdGFbMF0uX2lkO1xuICAgICAgICBNZXNzYWdlT2JqLlN0YXR1cyA9IDA7IC8vIFJlY2VpdmUgZnJvbSBVU0VSXG4gICAgICAgIE1lc3NhZ2VPYmouQ2hhbm5lbCA9ICdTTVMnXG4gICAgICAgIGNvbnN0IHNhdmVkTWVzc2FnZSA9IGF3YWl0IE1lc3NhZ2VPYmouc2F2ZSgpO1xuICAgICAgICBsZXQgbGFzdEV2ZW50VGl0bGUgPSAnJztcbiAgICAgICAgY29uc3QgZXZlbnQgPSBhd2FpdCBFdmVudE1vZGVsLmZpbmRPbmUoe1xuICAgICAgICAgICAgUmVnaXN0cmF0aW9uczogdXNlckRhdGFbMF0uX2lkXG4gICAgICAgIH0pLnNvcnQoe19pZDogLTF9KTtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBsYXN0RXZlbnRUaXRsZSA9IGBsYXN0IGV2ZW50ICR7ZXZlbnQuTmFtZX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIHJlcy5zZW5kKGA8UmVzcG9uc2U+PFNtcz5XZSBoYXZlIHJlY2VpdmVkIHlvdXIgbWVzc2FnZSwgd2Ugd2lsbCBnZXQgYmFjayB0byB5b3Ugc29vbjwvU21zPjwvUmVzcG9uc2U+YCk7XG4gICAgICAgIHJlcy5zZW5kKGA8UmVzcG9uc2U+V2UgaGF2ZSByZWNlaXZlZCB5b3VyIG1lc3NhZ2UsIHdlIHdpbGwgZ2V0IGJhY2sgdG8geW91IHNvb248L1Jlc3BvbnNlPmApO1xuICAgICAgICBwb3N0UGVvcGxlTWVzc2FnZVRvU2xhY2soe1xuICAgICAgICAgICAgJ3RleHQnOiBgXFxgXFxgXFxgICR7Ym9keX0gXFxgXFxgXFxgXG5mcm9tICR7dXNlckRhdGFbMF0uTmlja05hbWUgfHwgdXNlckRhdGFbMF0uRmlyc3ROYW1lIHx8IHVzZXJEYXRhWzBdLlBob25lTnVtYmVyfSAtIDwke3Byb2Nlc3MuZW52LlNJVEVfVVJMfS9wLyR7dXNlckRhdGFbMF0uUGhvbmVOdW1iZXJ9fHJlcGx5IHRvICR7dG99PiAke2xhc3RFdmVudFRpdGxlfWAsXG4gICAgICAgICAgICAnbXJrZHduJzogdHJ1ZVxuICAgICAgICB9KS5jYXRjaCgoKSA9PiBsb2dnZXIuaW5mbygncGVvcGxlIG1lc3NhZ2Ugc2xhY2sgY2FsbCBmYWlsZWQgJywgYm9keSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc3RQZW9wbGVNZXNzYWdlVG9TbGFjayh7XG4gICAgICAgICAgICAndGV4dCc6IGBcXGAke2JvZHl9XFxgIC9uIFRoaXMgY2FtZSBmcm9tIHVucmVnaXN0ZXJlZCBudW1iZXIgJHtmcm9tfWAsXG4gICAgICAgICAgICBtcmtkd246IHRydWVcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4gbG9nZ2VyLmluZm8oJ3Blb3BsZSBtZXNzYWdlIHNsYWNrIGNhbGwgZmFpbGVkICcsIGJvZHkpKTtcbiAgICB9XG59OyJdfQ==
