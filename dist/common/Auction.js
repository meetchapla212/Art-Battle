"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuctionStatus = void 0;
const States_1 = require("./States");
const logger_1 = require("../config/logger");
const Event_1 = require("../models/Event");
const Lot_1 = require("../models/Lot");
const Twilio = require("twilio");
const ShortUrlGenerator_1 = require("./ShortUrlGenerator");
const Slack_1 = require("./Slack");
const Apns_1 = require("./Apns");
const FCM_1 = require("./FCM");
class AuctionStatus {
    constructor(eventId, contestantId, roundNumber, auctionIndex, cacheDel) {
        this.hardcodedConversionRate = {
            'USD': 1,
            'CAD': 1,
            'AUD': 0.678501,
            'EURO': 1.08,
            'GBP': 1.30,
            'PEN': 0.30,
            'INR': 0.014,
            'ZAR': 0.066,
            'MXN': 0.053
        };
        this.currencyUrlMap = {
            'USD': 'https://artb.art/b',
            'CAD': 'https://artbattle.com',
            'AUD': 'https://buy.artbattle.com',
            'EURO': 'https://buy.artbattle.com',
            'GBP': 'https://buy.artbattle.com',
            'PEN': 'https://buy.artbattle.com',
            'INR': 'https://buy.artbattle.com',
            'ZAR': 'https://buy.artbattle.com',
            'MXN': 'https://buy.artbattle.com'
        };
        this.eventId = eventId;
        this.contestantId = contestantId;
        this.roundNumber = roundNumber;
        this.auctionIndex = auctionIndex;
        this.cacheDel = cacheDel;
        this.isModified = false;
        this.contestantName = '';
    }
    async ChangeAuctionStatus() {
        try {
            if (!States_1.AuctionAdminStats[this.auctionIndex]) {
                logger_1.default.error(`Enable Auction should be 0 or 1  ${this.auctionIndex}`);
                const result = {
                    'Success': false,
                    Data: 'Invalid'
                };
                return result;
            }
            this.event = await Event_1.default.findOne({
                _id: this.eventId
            }).populate('Rounds.Contestants.Detail').populate('Country').populate('Currency');
            if (this.event) {
                await this.updateAuctionIndex();
                if (this.isModified) {
                    await this.event.save();
                    const result = {
                        'Success': true,
                        Data: States_1.AuctionAdminStats[this.auctionIndex]
                    };
                    if (this.auctionIndex === 2 && this.lotModel) {
                        await this.closeAuction();
                    }
                    const artId = this.lotModel.ArtId;
                    logger_1.default.info(`removing auction-detail-${artId} due to status change`);
                    const delRes = await this.cacheDel(`auction-detail-${artId}`);
                    logger_1.default.info(`removed auction-detail-${artId}  due to status change, ${JSON.stringify(delRes, null, 2)}`);
                    return result;
                }
                else {
                    logger_1.default.info(`nothing modified ${this.eventId}`);
                    const result = {
                        'Success': false,
                        Data: 'Invalid'
                    };
                    return result;
                }
            }
            else {
                logger_1.default.info(`matching event not found ${this.eventId}`);
                const result = {
                    'Success': false,
                    Data: 'Invalid'
                };
                return result;
            }
        }
        catch (e) {
            console.error(e);
            logger_1.default.error(`${e.message} ${e.stack}`);
            const result = {
                'Success': false,
                Data: 'Internal Server Error'
            };
            return result;
        }
    }
    updateContestant(contestants) {
        for (let j = 0; j < contestants.length; j++) {
            const contestant = contestants[j];
            if (contestant._id == this.contestantId) {
                contestant.EnableAuction = this.auctionIndex;
                this.isModified = true;
                return { contestants, contestant };
            }
        }
        return {
            contestants: undefined,
            contestant: undefined,
        };
    }
    async updateAuctionIndex() {
        const roundNumber = this.roundNumber;
        const auctionIndex = this.auctionIndex;
        const event = this.event;
        for (let i = 0; i < event.Rounds.length; i++) {
            const round = event.Rounds[i];
            if (round.RoundNumber === roundNumber) {
                const { contestants, contestant } = this.updateContestant(round.Contestants);
                round.Contestants = contestants;
                if (contestant && contestant.EaselNumber && contestant.Lot) {
                    // find Auction doc
                    this.lotModel = await Lot_1.default.findOne(contestant.Lot).populate('Bids.Registration');
                    this.lotModel.Status = auctionIndex;
                    await this.lotModel.save();
                    this.isModified = true;
                    this.contestantName = contestant.Detail.Name;
                }
                else {
                    throw {
                        message: 'Invalid Artist selected'
                    };
                }
                const currentRoundNumber = event.CurrentRound && event.CurrentRound.RoundNumber;
                if (this.isModified && round.RoundNumber === currentRoundNumber) {
                    // reflect in current round object too
                    const { contestants } = this.updateContestant(event.CurrentRound.Contestants);
                    event.CurrentRound.Contestants = contestants;
                }
                break;
            }
        }
    }
    async closeAuction() {
        // Send Notification to winner on Auction close
        const lotModel = this.lotModel;
        const event = this.event;
        const contestantName = this.contestantName;
        const bids = lotModel.Bids.sort((a, b) => {
            return b.Amount - a.Amount;
        });
        const hardcodedConversionRate = this.hardcodedConversionRate;
        const currency = this.event && this.event.Currency && this.event.Currency.currency_label || 'USD';
        const buyHost = this.currencyUrlMap[currency] || this.currencyUrlMap['USD'];
        if (bids[0]) {
            const opr = bids[0].Amount;
            if (hardcodedConversionRate[event.Currency && event.Currency.currency_label || 'USD'] !== 1) {
                bids[0].Amount = bids[0].Amount * hardcodedConversionRate[event.Currency.currency_label];
                // event.Currency.currency_label = 'USD';
            }
            const PhoneNumber = bids[0].Registration.PhoneNumber;
            const NickName = bids[0].Registration.NickName || '';
            const DeviceTokens = bids[0].Registration.DeviceTokens;
            const AndroidDeviceTokens = bids[0].Registration.AndroidDeviceTokens;
            let userVoteChannel = 'sms';
            for (let i = 0; i < event.RegistrationsVoteFactor.length; i++) {
                if (event.RegistrationsVoteFactor[i].PhoneNumber === PhoneNumber) {
                    userVoteChannel = event.RegistrationsVoteFactor[i].From;
                    break;
                }
            }
            const twilioClient = Twilio();
            let link = `${buyHost}/buy/?id=${lotModel.ArtId}&pr=${bids[0].Amount}`;
            if (currency === 'USD') {
                link = link.replace('/buy', '');
            }
            if (bids[0].Amount !== opr) {
                link += `&opr=${opr}`;
            }
            link += `&ph=${PhoneNumber}&nn=${encodeURIComponent(NickName)}`;
            link += `&bn=${bids[0].Registration.FirstName || '' + ' ' + bids[0].Registration.LastName || ''}`;
            link += `&em=${bids[0].Registration.Email || ''}`;
            link += `&cur=${event.Currency && event.Currency.currency_label || 'USD'}`;
            link += `&loc=${event.Country && event.Country.country_code || 'US'}`;
            link += `&tr=${event.Tax}`;
            const shortUrl = await new ShortUrlGenerator_1.ShortUrlGenerator().generateAndSaveUrl(link);
            const message = `You have won ${lotModel.ArtId} by ${contestantName}! Click to pay online or reply with any questions - ${process.env.SITE_URL}/b/${shortUrl.Hash}`;
            // message += `Click to pay online show your host the PAID receipt - ${process.env.SITE_URL}/b/${shortUrl.Hash}`;
            // if sms and app both are checked then sms should not be sent to a app number
            logger_1.default.info(`Sending message: ${message} From: ${event.PhoneNumber} To: ${PhoneNumber}`);
            let twilioRes;
            try {
                twilioRes = await twilioClient.messages.create({
                    from: event.PhoneNumber,
                    to: PhoneNumber,
                    body: message
                });
            }
            catch (e) {
                logger_1.default.error(`${e.message} ${e.stack}`);
            }
            Slack_1.postToSlackSMSFlood({
                'text': `${NickName}(${PhoneNumber}) (sms) \n${message} twilio sid : ${twilioRes && twilioRes.sid} source: Auction.ts CloseAuction`
            }).catch(() => logger_1.default.error(`changeAuctionStatus slack flood call failed  ${message} source: Auction.ts CloseAuction`));
            Slack_1.postToSlackBid({
                'text': `${NickName}(${PhoneNumber}) (sms) \n${message} twilio sid : ${twilioRes && twilioRes.sid}`
            }).catch(() => logger_1.default.error(`changeAuctionStatus slack call failed  ${message}`));
            logger_1.default.info(`sent message: ${message} From: ${event.PhoneNumber} To: ${PhoneNumber}`);
            logger_1.default.info(`winner DeviceTokens`, DeviceTokens);
            if (userVoteChannel != 'sms' && DeviceTokens.length > 0) {
                await Promise.all([
                    Apns_1.sendNotificationIgnoreErr(DeviceTokens, message, event.Name, {
                        url: `${link}`,
                        title: 'You have Won!'
                    }),
                    FCM_1.MultiCastIgnoreErr({
                        DeviceTokens: AndroidDeviceTokens,
                        link: link,
                        title: 'You have Won!',
                        message: message,
                        priority: 'normal',
                        analyticsLabel: 'won-push'
                    })
                ]);
                Slack_1.postToSlackBid({
                    'text': `${NickName}(${PhoneNumber}) (push) \n${JSON.stringify(message)}`
                }).catch(() => logger_1.default.error(`changeAuctionStatus slack call failed ${message}`));
            }
        }
        else {
            logger_1.default.info('auction close, but no bidder');
        }
    }
}
exports.AuctionStatus = AuctionStatus;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
