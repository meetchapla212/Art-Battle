if (!String.prototype.compareTo) {
    String.prototype.compareTo = function (s, ignoreCase) {
        return String.compareTo(this, s, ignoreCase);
    };
}
if (!String.compareTo) {
    String.compareTo = function (s1, s2, ignoreCase) {
        if (ignoreCase) {
            if (s1) {
                s1 = s1.toUpperCase();
            }
            if (s2) {
                s2 = s2.toUpperCase();
            }
        }
        s1 = s1 || '';
        s2 = s2 || '';
        if (s1 == s2) {
            return 0;
        }
        if (s1 < s2) {
            return -1;
        }
        return 1;
    };
}
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (str) {
        return this.indexOf(str) == 0;
    };
}
if (!String.isNullOrEmpty) {
    String.isNullOrEmpty = function (s) {
        return !s || !s.length;
    };
}
if (!String.concat) {
    String.concat = function () {
        if (arguments.length === 2) {
            return arguments[0] + arguments[1];
        }
        return Array.prototype.join.call(arguments, '');
    };
}
// MA: Deprecating this in favour of template strings. leaving it here in case we need it back.
if (!String.format) {
    String.format = function (format, ...values) {
        return __format(format, arguments, false);
    };
}
function __format(format, values, useLocale) {
    const _formatRE = /(\{[^\}^\{]+\})/g;
    return format.replace(_formatRE, function (str, m) {
        const index = parseInt(m.substr(1));
        const value = values[index + 1];
        if ((value === null) || (value === undefined)) {
            return '';
        }
        if (value.format) {
            let formatSpec = null;
            const formatIndex = m.indexOf(':');
            if (formatIndex > 0) {
                formatSpec = m.substring(formatIndex + 1, m.length - 1);
            }
            return value.format(formatSpec);
        }
        else {
            return value.toString();
        }
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9TdHJpbmdFeHRlbnNpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRTtJQUM3QixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQVMsRUFBRSxVQUFtQjtRQUNqRSxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUM7Q0FDTDtBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO0lBQ25CLE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBVSxFQUFVLEVBQUUsRUFBVSxFQUFFLFVBQW1CO1FBQ3BFLElBQUksVUFBVSxFQUFFO1lBQ1osSUFBSSxFQUFFLEVBQUU7Z0JBQ0osRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUN6QjtZQUNELElBQUksRUFBRSxFQUFFO2dCQUNKLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDekI7U0FDSjtRQUNELEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ2QsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFFZCxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDVixPQUFPLENBQUMsQ0FBQztTQUNaO1FBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ1QsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNiO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDLENBQUM7Q0FDTDtBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUM5QixNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLEdBQVc7UUFDL0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUM7Q0FDTDtBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO0lBQ3ZCLE1BQU0sQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFTO1FBQ3RDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUMsQ0FBQztDQUNMO0FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7SUFDaEIsTUFBTSxDQUFDLE1BQU0sR0FBRztRQUNaLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQztDQUNMO0FBRUQsK0ZBQStGO0FBQy9GLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0lBQ2hCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsVUFBVSxNQUFNLEVBQUUsR0FBRyxNQUFNO1FBQ3ZDLE9BQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0NBQ0w7QUFFRCxTQUFTLFFBQVEsQ0FBQyxNQUFjLEVBQUUsTUFBa0IsRUFBRSxTQUFrQjtJQUNwRSxNQUFPLFNBQVMsR0FBVyxrQkFBa0IsQ0FBQztJQUU5QyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUMzQixVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ1osTUFBTyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxNQUFPLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUNELElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUssVUFBVSxHQUFXLElBQUksQ0FBQztZQUMvQixNQUFPLFdBQVcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BDLElBQUksV0FBVyxHQUFHLENBQUMsRUFBRTtnQkFDakIsVUFBVSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1lBQ0QsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ25DO2FBQ0k7WUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMzQjtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsImZpbGUiOiJjb21tb24vU3RyaW5nRXh0ZW5zaW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBTdHJpbmcge1xuICAgIHN0YXJ0c1dpdGgoc3RyOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGNvbXBhcmVUbyhzOiBzdHJpbmcsIGlnbm9yZUNhc2U6IGJvb2xlYW4pOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBTdHJpbmdDb25zdHJ1Y3RvciB7XG4gICAgaXNOdWxsT3JFbXB0eShzOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIGNvbmNhdCguLi5zdHJpbmdzOiBzdHJpbmdbXSk6IHN0cmluZztcbiAgICBmb3JtYXQoZm9ybWF0OiBzdHJpbmcsIC4uLnZhbHVlczogYW55W10pOiBzdHJpbmc7XG4gICAgY29tcGFyZVRvKHN0cjE6IHN0cmluZywgc3RyMjogc3RyaW5nLCBpZ25vcmVDYXNlOiBib29sZWFuKTogbnVtYmVyO1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuY29tcGFyZVRvKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAoczogc3RyaW5nLCBpZ25vcmVDYXNlOiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuY29tcGFyZVRvKHRoaXMsIHMsIGlnbm9yZUNhc2UpO1xuICAgIH07XG59XG5cbmlmICghU3RyaW5nLmNvbXBhcmVUbykge1xuICAgIFN0cmluZy5jb21wYXJlVG8gPSBmdW5jdGlvbiAoczE6IHN0cmluZywgczI6IHN0cmluZywgaWdub3JlQ2FzZTogYm9vbGVhbikge1xuICAgICAgICBpZiAoaWdub3JlQ2FzZSkge1xuICAgICAgICAgICAgaWYgKHMxKSB7XG4gICAgICAgICAgICAgICAgczEgPSBzMS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMyKSB7XG4gICAgICAgICAgICAgICAgczIgPSBzMi50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHMxID0gczEgfHwgJyc7XG4gICAgICAgIHMyID0gczIgfHwgJyc7XG5cbiAgICAgICAgaWYgKHMxID09IHMyKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgPCBzMikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG59XG5cbmlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24gKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc3RyKSA9PSAwO1xuICAgIH07XG59XG5cbmlmICghU3RyaW5nLmlzTnVsbE9yRW1wdHkpIHtcbiAgICBTdHJpbmcuaXNOdWxsT3JFbXB0eSA9IGZ1bmN0aW9uIChzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICFzIHx8ICFzLmxlbmd0aDtcbiAgICB9O1xufVxuXG5pZiAoIVN0cmluZy5jb25jYXQpIHtcbiAgICBTdHJpbmcuY29uY2F0ID0gZnVuY3Rpb24gKCk6IHN0cmluZyB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdICsgYXJndW1lbnRzWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuam9pbi5jYWxsKGFyZ3VtZW50cywgJycpO1xuICAgIH07XG59XG5cbi8vIE1BOiBEZXByZWNhdGluZyB0aGlzIGluIGZhdm91ciBvZiB0ZW1wbGF0ZSBzdHJpbmdzLiBsZWF2aW5nIGl0IGhlcmUgaW4gY2FzZSB3ZSBuZWVkIGl0IGJhY2suXG5pZiAoIVN0cmluZy5mb3JtYXQpIHtcbiAgICBTdHJpbmcuZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCwgLi4udmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBfX2Zvcm1hdChmb3JtYXQsIGFyZ3VtZW50cywgZmFsc2UpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIF9fZm9ybWF0KGZvcm1hdDogc3RyaW5nLCB2YWx1ZXM6IElBcmd1bWVudHMsIHVzZUxvY2FsZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgY29uc3QgIF9mb3JtYXRSRTogUmVnRXhwID0gLyhcXHtbXlxcfV5cXHtdK1xcfSkvZztcblxuICAgIHJldHVybiBmb3JtYXQucmVwbGFjZShfZm9ybWF0UkUsXG4gICAgICAgIGZ1bmN0aW9uIChzdHIsIG0pIHtcbiAgICAgICAgICAgIGNvbnN0ICBpbmRleCA9IHBhcnNlSW50KG0uc3Vic3RyKDEpKTtcbiAgICAgICAgICAgIGNvbnN0ICB2YWx1ZSA9IHZhbHVlc1tpbmRleCArIDFdO1xuICAgICAgICAgICAgaWYgKCh2YWx1ZSA9PT0gbnVsbCkgfHwgKHZhbHVlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlLmZvcm1hdCkge1xuICAgICAgICAgICAgICAgIGxldCAgZm9ybWF0U3BlYzogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb25zdCAgZm9ybWF0SW5kZXggPSBtLmluZGV4T2YoJzonKTtcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFNwZWMgPSBtLnN1YnN0cmluZyhmb3JtYXRJbmRleCArIDEsIG0ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5mb3JtYXQoZm9ybWF0U3BlYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59Il19
