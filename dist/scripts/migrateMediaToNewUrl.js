"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bootstrap_1 = require("./bootstrap");
const Event_1 = require("../models/Event");
let mongoose;
bootstrap_1.default().then((obj) => {
    mongoose = obj.mongoose;
    return start();
}).then(() => {
    console.log('done');
    return mongoose.connection.close();
}).catch(e => {
    console.error(e);
    if (mongoose.connection) {
        return mongoose.connection.close();
    }
}).then(() => {
    console.log('closed db conn');
});
async function start() {
    const events = await Event_1.default.find({});
    for (let i = 0; i < events.length; i++) {
        const rounds = events[i].Rounds;
        for (let j = 0; j < rounds.length; j++) {
            const contestants = rounds[j].Contestants;
            for (let k = 0; k < contestants.length; k++) {
                const contestant = contestants[k];
                const images = contestant.Images || [];
                for (let l = 0; l < images.length; l++) {
                    const image = images[l];
                    if (image.Compressed && image.Compressed.url)
                        image.Compressed.url = _replacePath(image.Compressed.url);
                    if (image.Thumbnail && image.Thumbnail.url)
                        image.Thumbnail.url = _replacePath(image.Thumbnail.url);
                    if (image.Original && image.Original.url)
                        image.Original.url = _replacePath(image.Original.url);
                    if (image.Edited && image.Edited.url)
                        image.Edited.url = _replacePath(image.Edited.url);
                }
                const videos = contestant.Videos;
                for (let l = 0; l < videos.length; l++) {
                    videos[l].Original.url = _replacePath(videos[l].Original.url);
                }
            }
        }
        await events[i].save();
    }
}
function _replacePath(url) {
    let URL = url.replace('a.artbattle.com', 'artb.art/vote-media');
    URL = URL.replace('vote.artbattle.com', 'artb.art/vote-media');
    return URL;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvbWlncmF0ZU1lZGlhVG9OZXdVcmwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBa0M7QUFDbEMsMkNBQXlDO0FBQ3pDLElBQUksUUFBbUMsQ0FBQztBQUN4QyxtQkFBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDbkIsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDeEIsT0FBTyxLQUFLLEVBQUUsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ1QsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7UUFDckIsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ3RDO0FBQ0wsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtJQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssVUFBVSxLQUFLO0lBQ2hCLE1BQU0sTUFBTSxHQUFHLE1BQU0sZUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNwQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ2hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7WUFDMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pDLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7Z0JBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNwQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUc7d0JBQzVDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUMxRCxJQUFJLEtBQUssQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHO3dCQUMxQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDeEQsSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRzt3QkFDeEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3RELElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUc7d0JBQ3BDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNyRDtnQkFDRCxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO2dCQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2pFO2FBQ0o7U0FDSjtRQUNELE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQzFCO0FBQ0wsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLEdBQVc7SUFDN0IsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2hFLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLHFCQUFxQixDQUFDLENBQUM7SUFDL0QsT0FBTyxHQUFHLENBQUM7QUFDZixDQUFDIiwiZmlsZSI6InNjcmlwdHMvbWlncmF0ZU1lZGlhVG9OZXdVcmwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9hZEFwcCBmcm9tICcuL2Jvb3RzdHJhcCc7XG5pbXBvcnQgRXZlbnRNb2RlbCBmcm9tICcuLi9tb2RlbHMvRXZlbnQnO1xubGV0IG1vbmdvb3NlOiB0eXBlb2YgaW1wb3J0KCdtb25nb29zZScpO1xubG9hZEFwcCgpLnRoZW4oKG9iaikgPT4ge1xuICAgIG1vbmdvb3NlID0gb2JqLm1vbmdvb3NlO1xuICAgIHJldHVybiBzdGFydCgpO1xufSkudGhlbigoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2RvbmUnKTtcbiAgICByZXR1cm4gbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xufSkuY2F0Y2goZSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcbiAgICBpZiAobW9uZ29vc2UuY29ubmVjdGlvbikge1xuICAgICAgICByZXR1cm4gbW9uZ29vc2UuY29ubmVjdGlvbi5jbG9zZSgpO1xuICAgIH1cbn0pLnRoZW4oKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdjbG9zZWQgZGIgY29ubicpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnN0IGV2ZW50cyA9IGF3YWl0IEV2ZW50TW9kZWwuZmluZCh7fSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgcm91bmRzID0gZXZlbnRzW2ldLlJvdW5kcztcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByb3VuZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlc3RhbnRzID0gcm91bmRzW2pdLkNvbnRlc3RhbnRzO1xuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBjb250ZXN0YW50cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlc3RhbnQgPSBjb250ZXN0YW50c1trXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZXMgPSBjb250ZXN0YW50LkltYWdlcyB8fCBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBsID0gMDsgbCA8IGltYWdlcy5sZW5ndGg7IGwrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IGltYWdlc1tsXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLkNvbXByZXNzZWQgJiYgaW1hZ2UuQ29tcHJlc3NlZC51cmwpXG4gICAgICAgICAgICAgICAgICAgIGltYWdlLkNvbXByZXNzZWQudXJsID0gX3JlcGxhY2VQYXRoKGltYWdlLkNvbXByZXNzZWQudXJsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLlRodW1ibmFpbCAmJiBpbWFnZS5UaHVtYm5haWwudXJsKVxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5UaHVtYm5haWwudXJsID0gX3JlcGxhY2VQYXRoKGltYWdlLlRodW1ibmFpbC51cmwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2UuT3JpZ2luYWwgJiYgaW1hZ2UuT3JpZ2luYWwudXJsKVxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5PcmlnaW5hbC51cmwgPSBfcmVwbGFjZVBhdGgoaW1hZ2UuT3JpZ2luYWwudXJsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlLkVkaXRlZCAmJiBpbWFnZS5FZGl0ZWQudXJsKVxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5FZGl0ZWQudXJsID0gX3JlcGxhY2VQYXRoKGltYWdlLkVkaXRlZC51cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB2aWRlb3MgPSBjb250ZXN0YW50LlZpZGVvcztcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBsID0gMDsgbCA8IHZpZGVvcy5sZW5ndGg7IGwrKykge1xuICAgICAgICAgICAgICAgICAgICB2aWRlb3NbbF0uT3JpZ2luYWwudXJsID0gX3JlcGxhY2VQYXRoKHZpZGVvc1tsXS5PcmlnaW5hbC51cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBldmVudHNbaV0uc2F2ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX3JlcGxhY2VQYXRoKHVybDogc3RyaW5nKSB7XG4gICAgbGV0IFVSTCA9IHVybC5yZXBsYWNlKCdhLmFydGJhdHRsZS5jb20nLCAnYXJ0Yi5hcnQvdm90ZS1tZWRpYScpO1xuICAgIFVSTCA9IFVSTC5yZXBsYWNlKCd2b3RlLmFydGJhdHRsZS5jb20nLCAnYXJ0Yi5hcnQvdm90ZS1tZWRpYScpO1xuICAgIHJldHVybiBVUkw7XG59Il19
