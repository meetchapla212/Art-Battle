{"version":3,"sources":["common/StringExtensions.ts"],"names":[],"mappings":"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","file":"StringExtensions.js","sourcesContent":["interface String {\r\n    startsWith(str: string): boolean;\r\n    compareTo(s: string, ignoreCase: boolean): number;\r\n}\r\n\r\ninterface StringConstructor {\r\n    isNullOrEmpty(s: string): boolean;\r\n    concat(...strings: string[]): string;\r\n    format(format: string, ...values: any[]): string;\r\n    compareTo(str1: string, str2: string, ignoreCase: boolean): number;\r\n}\r\n\r\nif (!String.prototype.compareTo) {\r\n    String.prototype.compareTo = function (s: string, ignoreCase: boolean)\r\n    {\r\n        return String.compareTo(this, s, ignoreCase);\r\n    };\r\n}\r\n\r\nif (!String.compareTo) {\r\n    String.compareTo = function (s1: string, s2: string, ignoreCase: boolean)\r\n    {\r\n        if (ignoreCase) {\r\n            if (s1) {\r\n                s1 = s1.toUpperCase();\r\n            }\r\n            if (s2) {\r\n                s2 = s2.toUpperCase();\r\n            }\r\n        }\r\n        s1 = s1 || '';\r\n        s2 = s2 || '';\r\n\r\n        if (s1 == s2) {\r\n            return 0;\r\n        }\r\n        if (s1 < s2) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    };\r\n}\r\n\r\nif (!String.prototype.startsWith) {\r\n    String.prototype.startsWith = function (str: string): boolean {\r\n        return this.indexOf(str) == 0;\r\n    };\r\n}\r\n\r\nif (!String.isNullOrEmpty) {\r\n    String.isNullOrEmpty = function (s: string): boolean {\r\n        return !s || !s.length;\r\n    };\r\n}\r\n\r\nif (!String.concat) {\r\n    String.concat = function (): string\r\n    {\r\n        if (arguments.length === 2) {\r\n            return arguments[0] + arguments[1];\r\n        }\r\n        return Array.prototype.join.call(arguments, '');\r\n    };\r\n}\r\n\r\n// MA: Deprecating this in favour of template strings. leaving it here in case we need it back.\r\nif (!String.format) {\r\n    String.format = function (format, ...values) {\r\n        return __format(format, arguments, false);\r\n    };\r\n}\r\n\r\nfunction __format(format: string, values: IArguments, useLocale: boolean): string {\r\n    const  _formatRE: RegExp = /(\\{[^\\}^\\{]+\\})/g;\r\n\r\n    return format.replace(_formatRE,\r\n        function (str, m) {\r\n            const  index = parseInt(m.substr(1));\r\n            const  value = values[index + 1];\r\n            if ((value === null) || (value === undefined)) {\r\n                return '';\r\n            }\r\n            if (value.format) {\r\n                let  formatSpec: string = null;\r\n                const  formatIndex = m.indexOf(':');\r\n                if (formatIndex > 0) {\r\n                    formatSpec = m.substring(formatIndex + 1, m.length - 1);\r\n                }\r\n                return value.format(formatSpec);\r\n            }\r\n            else {\r\n                return value.toString();\r\n            }\r\n        });\r\n}"]}