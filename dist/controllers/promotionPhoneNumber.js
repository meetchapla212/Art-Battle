"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEvents = exports.getEventPhoneNumber = void 0;
// @ts-ignore
const date_fns_timezone_1 = require("date-fns-timezone");
// @ts-ignore
const date_fns_1 = require("date-fns");
const Event_1 = require("../models/Event");
const EventPhoneNumber_1 = require("../models/EventPhoneNumber");
exports.getEventPhoneNumber = async (req, res, next) => {
    const query = {
        status: 1,
    };
    const promises = [];
    const promise1 = EventPhoneNumber_1.default.find(query).select([
        '_id',
        'phone',
        'label',
        'type',
        'location',
        'status'
    ])
        .sort({
        'EventStartDateTime': -1
    }).exec();
    promises.push(promise1);
    const results = await Promise.all(promises);
    const activeEventsPhoneNumber = results[0];
    res.json(activeEventsPhoneNumber);
};
exports.getEvents = async (req, res, next) => {
    const PhoneNumber = false;
    const eventId = req.query.eventName;
    const query = {
        ShowInApp: true,
    };
    if (eventId && eventId.length > 0) {
        query.Name = new RegExp(eventId);
    }
    const promises = [];
    const promise1 = Event_1.default.find(query).select([
        '_id',
        'EID',
        'Name',
        'CurrentRound',
        'Country',
        'Rounds',
        'EventStartDateTime',
        'TicketLink',
        'Venue',
        'Price',
        'Description',
        'EventEndDateTime',
        'TimeZoneICANN',
    ])
        .populate('Country')
        .populate('Rounds.Contestants.Votes')
        .sort({
        'EventStartDateTime': -1
    }).exec();
    promises.push(promise1);
    // past event list
    const results = await Promise.all(promises);
    const activeEvents = results[0];
    const activeEventsList = [];
    for (let i = 0; i < activeEvents.length; i++) {
        const event = activeEvents[i];
        const currentRound = event.CurrentRound;
        const currentRoundNumber = currentRound && currentRound.RoundNumber;
        let numVotes = 0;
        let roundText = '';
        let roundColor = '';
        let statusTextColor = '#FFF';
        const totalRounds = event.Rounds.length;
        let hasOpenRound = false;
        for (let j = 0; j < totalRounds; j++) {
            const Round = event.Rounds[j];
            if (!Round.IsFinished) {
                hasOpenRound = true;
            }
            const contestants = Round.Contestants;
            for (let k = 0; k < contestants.length; k++) {
                numVotes += contestants[k].Votes.length;
            }
        }
        if (currentRoundNumber) {
            roundText = `LIVE`;
            roundColor = '#D14B19';
        }
        else {
            if (hasOpenRound) {
                const eventDate = new Date(event.EventStartDateTime);
                const differenceInMs = date_fns_1.differenceInMilliseconds(eventDate, new Date());
                const distanceInWord = date_fns_1.distanceInWordsStrict(eventDate, new Date());
                if (differenceInMs > 0) {
                    roundText = `In ${distanceInWord}`;
                    roundColor = '#1975D1';
                    roundText = roundText.replace('days', 'd');
                    roundText = roundText.replace('seconds', 's');
                    roundText = roundText.replace('hours', 'h');
                    roundText = roundText.replace('minutes', 'm');
                    roundText = roundText.replace('months', 'mo');
                    roundText = roundText.replace('years', 'y');
                }
                else {
                    roundText = `Starting soon`;
                    roundColor = '#1975D1';
                }
            }
            else {
                roundText = 'FINAL';
                roundColor = '#FFF';
                statusTextColor = '#000';
            }
        }
        const eventObj = {
            id: event._id,
            EID: event.EID || '',
            title: event.Name,
            flag: event.Country ? `${process.env.SITE_URL}/images/countries/4x3/${event.Country.country_image}` : '',
            flagPng: event.Country ? `${process.env.SITE_URL}/images/countries/4x3_png/${event.Country.country_image.replace('svg', 'png')}` : '',
            statusText: roundText,
            statusColor: roundColor,
            statusTextColor: statusTextColor,
            eventId: event.id,
            openVoting: false,
            openStatus: false,
            TicketLink: event.TicketLink || '',
            Venue: event.Venue || '',
            Price: event.Price || '',
            Description: event.Description,
            DataTimeRange: date_fns_timezone_1.formatToTimeZone(new Date(event.EventStartDateTime), 'MMMMDo-hmmaz', { timeZone: event.TimeZoneICANN || 'America/Toronto' }),
            Votes: numVotes,
            EventNo: i + 1,
            StreamUrl: event.VideoStream || event.LiveStream
        };
        activeEventsList.push(eventObj);
    }
    const eventList = [
        {
            label: 'ACTIVE EVENTS',
            items: activeEventsList,
            topPlayerUrl: ''
        }
    ];
    const result = {
        'Success': true,
        Data: eventList
    };
    res.json(activeEventsList);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
