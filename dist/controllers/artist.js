"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.refreshProductCache = exports.deleteProduct = exports.saveProduct = exports.wooList = exports.addVideo = exports.redirectedToInternal = exports.follow = exports.artistPublicProfile = exports.create = exports.update = exports.get = exports.autoSuggest = exports.search = exports.index = void 0;
const logger_1 = require("../config/logger");
const Contestant_1 = require("../models/Contestant");
const ArtistService_1 = require("../common/ArtistService");
const jsonwebtoken_1 = require("jsonwebtoken");
const Registration_1 = require("../models/Registration");
const ArtistWooCommerce_1 = require("../models/ArtistWooCommerce");
exports.index = async (req, res, next) => {
    try {
        const artistService = new ArtistService_1.ArtistService();
        // const list = await  artistService.List(req.user && req.user.Hash, req.app.get('cacheSet'), req.app.get('cacheGet'));
        const userId = req.user && req.user._id;
        const hash = req.user && req.user.Hash;
        let token = '';
        if (req.user) {
            token = jsonwebtoken_1.sign({
                registrationId: req.user._id
            }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXP_TIME || '1y' });
            res.cookie('jwt', token, {
                httpOnly: true,
                sameSite: true,
                signed: true,
                secure: false
            });
        }
        res.redirect(307, `${process.env.SITE_URL}/resp/artists`);
        return;
        /*
        const list = await artistService.getArtistPageData(userId, hash, req.app.get('cacheSet'), req.app.get('cacheGet'));
    
        /*res.render('artist_list', {
          artistList: list,
          token: token
        });*/
        /*res.render('artist_list_v2', {
          artistList: list[0],
          followingArtist: list[1],
          token: token
        });*/
    }
    catch (e) {
        if (!e.status) {
            e.status = 500;
        }
        if (!e.message) {
            logger_1.default.error(e);
            e.message = 'Server error occurred!';
            e.Message = e.message;
        }
        next(e);
    }
};
exports.search = async (req, res, next) => {
    try {
        const searchTerm = req.body.searchTerm || '';
        /*const sortCol = req.body.sortCol || '_id';
        const sortOrder = req.body.sortOrder || -1;
        const sortObj: {
          [key: string]: number;
        } = {};
        sortObj[sortCol] = sortOrder;*/
        const artistService = new ArtistService_1.ArtistService();
        const resp = await artistService.searchArtists(searchTerm, req.body.limit, req.body.page, req.app.get('cacheSet'), req.app.get('cacheGet'));
        res.json(resp);
    }
    catch (e) {
        next(e);
    }
};
exports.autoSuggest = async (req, res, next) => {
    try {
        const searchTerm = req.query.q || '';
        const or = [
            {
                $text: {
                    $search: searchTerm,
                },
            },
            {
                Email: searchTerm
            }
        ];
        const entryId = parseInt(searchTerm);
        if (!isNaN(entryId)) {
            or.push({
                EntryId: entryId
            });
        }
        let query = {};
        if (searchTerm.length > 0) {
            query = {
                $or: or
            };
        }
        query.IsDuplicate = { $in: [null, false] };
        query.EntryId = { $exists: true };
        const results = await Promise.all([
            Contestant_1.default.find(query, { score: { $meta: 'textScore' } })
                .select(['_id', 'Name', 'EntryId'])
                .sort({ score: { $meta: 'textScore' } }),
            // .limit(req.query.limit)
            // .skip((req.query.page - 1) * 10)
        ]);
        const contestants = results[0];
        const resp = {
            Success: true,
            Data: {
                Contestants: contestants,
            }
        };
        res.json(resp);
    }
    catch (e) {
        next(e);
    }
};
exports.get = async (req, res, next) => {
    try {
        const contestantId = req.params.contestantId;
        if (!contestantId) {
            const message = `contestant Id is required`;
            logger_1.default.error(message);
            res.json({
                Success: false,
                status: 403,
                message: message
            });
            return;
        }
        const contestant = await Contestant_1.default.findById(contestantId).populate('Registration');
        if (!contestant) {
            const message = `Invalid contestant Id passed ${contestantId}`;
            logger_1.default.error(message);
            res.json({
                Success: false,
                status: 404,
                message: message
            });
            return;
        }
        const resp = {
            Success: true,
            Data: contestant
        };
        res.json(resp);
    }
    catch (e) {
        if (!e.status) {
            e.status = 500;
        }
        if (!e.message) {
            e.message = 'Server error occurred!';
        }
        next(e);
    }
};
exports.update = async (req, res, next) => {
    try {
        const artistService = new ArtistService_1.ArtistService();
        const contestantId = req.params.contestantId;
        const contestant = await artistService.Update(contestantId, req.body, req.header('user-agent'));
        const resp = {
            Success: true,
            Data: contestant
        };
        res.json(resp);
    }
    catch (e) {
        if (!e.status) {
            e.status = 500;
        }
        if (!e.message) {
            logger_1.default.error(e);
            e.message = 'Server error occurred!';
        }
        next(e);
    }
};
exports.create = async (req, res, next) => {
    try {
        const artistService = new ArtistService_1.ArtistService();
        const contestant = await artistService.Add(req.body, req.header('user-agent'));
        const resp = {
            Success: true,
            Data: contestant
        };
        res.json(resp);
    }
    catch (e) {
        next(e);
    }
};
exports.artistPublicProfile = async (req, res, next) => {
    try {
        const artistService = new ArtistService_1.ArtistService();
        const hash = req.params.hash;
        let regId;
        let phoneNumber;
        if (hash) {
            const result = await Registration_1.default.findOne({ Hash: hash });
            if (result) {
                regId = result._id;
                phoneNumber = result.PhoneNumber;
            }
        }
        const userId = req.user && req.user._id || regId;
        phoneNumber = phoneNumber || req.user && req.user.PhoneNumber;
        const artistProfile = await artistService.cachedArtistProfile(req.app.get('cacheSet'), req.app.get('cacheGet'), req.params.contestantId, userId, phoneNumber);
        let token;
        if (req.user) {
            // set cookie only for those who opened in browser.
            // dup token calculation because we are targeting cookie based req.user here
            token = jsonwebtoken_1.sign({
                registrationId: userId
            }, process.env.JWT_SECRET, { expiresIn: process.env.JWT_EXP_TIME || '1y' });
        }
        let artistProfileJson = JSON.stringify(artistProfile);
        artistProfileJson = artistProfileJson.replace(/[\\]/g, '\\\\')
            .replace(/[\"]/g, '\\\"')
            .replace(/[\/]/g, '\\/')
            .replace(/[\b]/g, '\\b')
            .replace(/[\f]/g, '\\f')
            .replace(/[\n]/g, '\\n')
            .replace(/[\r]/g, '\\r')
            .replace(/[\t]/g, '\\t');
        res.render('artist_public_profile', {
            token: token,
            artistId: req.params.contestantId,
            artistProfile: artistProfile,
            artistProfileJson: artistProfileJson,
            phoneHash: hash,
            title: artistProfile.Name
        });
    }
    catch (e) {
        next(e);
    }
};
exports.follow = async (req, res, next) => {
    try {
        const hash = req.params.hash;
        let regId;
        if (hash) {
            const result = await Registration_1.default.findOne({ Hash: hash });
            if (result) {
                regId = result._id;
            }
        }
        const userId = req.user && req.user._id || regId;
        const artistService = new ArtistService_1.ArtistService();
        const contestantId = req.params.contestantId;
        await artistService.Follow(contestantId, userId, req.body.IsFollowing);
        const resp = {
            Success: true,
            Data: 'Success'
        };
        res.json(resp);
    }
    catch (e) {
        if (!e.status) {
            e.status = 500;
        }
        if (!e.message) {
            logger_1.default.error(e);
            e.message = 'Server error occurred!';
        }
        next(e);
    }
};
exports.redirectedToInternal = async (req, res, next) => {
    try {
        if (req.params.entryId) {
            const contestant = await Contestant_1.default.findOne({ EntryId: req.params.entryId }).select(['_id']);
            if (contestant) {
                res.redirect(`${process.env.SITE_URL}/ar/${contestant._id}/${req.params.hash || ''}`);
                return;
            }
        }
        next({
            Success: false,
            status: 404,
            Message: 'Entry Id not found'
        });
        return;
    }
    catch (e) {
        next(e);
    }
};
exports.addVideo = async (req, res, next) => {
    try {
        const artistId = req.params.artistId;
        const videoUrl = req.body.URL;
        await Contestant_1.default.update({ _id: artistId }, { $push: { Videos: videoUrl } });
        const resp = {
            Success: true,
            Data: 'Success'
        };
        res.json(resp);
    }
    catch (e) {
        next(e);
    }
};
exports.wooList = async (req, res, next) => {
    try {
        const searchTerm = req.body.searchTerm || '';
        /*const sortCol = req.body.sortCol || '_id';
        const sortOrder = req.body.sortOrder || -1;
        const sortObj: {
          [key: string]: number;
        } = {};
        sortObj[sortCol] = sortOrder;*/
        const artistService = new ArtistService_1.ArtistService();
        const resp = await artistService.getProducts(searchTerm, req.body.limit, req.body.page);
        res.json(resp);
    }
    catch (e) {
        next(e);
    }
};
exports.saveProduct = async (req, res, next) => {
    try {
        const payload = req.body;
        const product = await ArtistWooCommerce_1.default.findOne({ ProductId: payload.ProductId });
        const artistService = new ArtistService_1.ArtistService();
        if (product) {
            res.json(await artistService.updateProduct(payload, product, req.app.get('cacheSet'), req.app.get('cacheGet')));
        }
        else {
            res.json(await artistService.addProduct(payload, req.app.get('cacheSet'), req.app.get('cacheGet')));
        }
    }
    catch (e) {
        next(e);
    }
};
exports.deleteProduct = async (req, res, next) => {
    try {
        const artistService = new ArtistService_1.ArtistService();
        await artistService.removeProduct(req.params.productId, req.app.get('cacheSet'), req.app.get('cacheGet'));
        const resp = {
            Success: true,
            Data: 'Success'
        };
        res.json(resp);
    }
    catch (e) {
        next(e);
    }
};
exports.refreshProductCache = async (req, res, next) => {
    try {
        const artistService = new ArtistService_1.ArtistService();
        await artistService.updateProductCache(req.params.productId, req.app.get('cacheSet'), req.app.get('cacheGet'));
        const resp = {
            Success: true,
            Data: 'Success'
        };
        res.json(resp);
    }
    catch (e) {
        next(e);
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
