"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bootstrap_1 = require("./bootstrap");
const Lot_1 = require("../models/Lot");
const Event_1 = require("../models/Event");
const VotingLog_1 = require("../models/VotingLog");
const Registration_1 = require("../models/Registration");
let incEid = 1;
let mongoose;
bootstrap_1.default().then((obj) => {
    mongoose = obj.mongoose;
    return start();
}).then(() => {
    console.log('done');
    return mongoose.connection.close();
}).catch(e => {
    console.error(e);
    if (mongoose.connection) {
        return mongoose.connection.close();
    }
}).then(() => {
    console.log('closed db conn');
});
async function start() {
    await updateLots();
    await updateVotingLogs();
}
async function updateLots() {
    const lots = await Lot_1.default.find().populate('Event');
    for (let i = 0; i < lots.length; i++) {
        const lot = lots[i];
        const event = lot.Event;
        await processContestants(event, lot);
    }
}
async function updateVotingLogs() {
    const events = await Event_1.default.find().populate('Rounds.Contestants.Detail');
    for (let i = 0; i < events.length; i++) {
        const event = events[i];
        for (let j = 0; j < event.Rounds.length; j++) {
            const round = event.Rounds[j];
            for (let k = 0; k < round.Contestants.length; k++) {
                await MapLotAndContestant(round.Contestants[k], round, event);
                await findAndMapVotingLogs(round.Contestants[k], round, event);
            }
        }
        await event.save();
    }
}
async function processContestants(Event, Lot) {
    for (let i = 0; i < Event.Rounds.length; i++) {
        const round = Event.Rounds[i];
        for (let j = 0; j < round.Contestants.length; j++) {
            const contestant = round.Contestants[j];
            if (!contestant.Lot) {
                contestant.Lot = Lot;
                await Event.save();
            }
            if (contestant.EaselNumber === Lot.EaselNumber && round.RoundNumber === Lot.Round) {
                Lot.Contestant = contestant.Detail;
                await Lot.save();
            }
        }
    }
}
async function findAndMapVotingLogs(contestant, round, event) {
    const logs = await VotingLog_1.default.find({
        RoundNumber: round.RoundNumber,
        EventId: event._id,
        EaselNumber: contestant.EaselNumber
    });
    for (let i = 0; i < logs.length; i++) {
        const log = logs[i];
        if (log.PhoneNumber) {
            await MapVotingLogLotContestantRegistration(contestant, round, event, log);
        }
    }
}
async function MapVotingLogLotContestantRegistration(contestant, round, event, log) {
    const registration = await Registration_1.default.findOne({ PhoneNumber: log.PhoneNumber });
    if (registration) {
        log.Registration = registration;
        log.Contestant = contestant.Detail;
        log.Lot = contestant.Lot;
        await log.save();
    }
}
async function MapLotAndContestant(contestant, round, event) {
    if (contestant.Enabled && contestant.EaselNumber > 0 && !contestant.Lot) {
        const Lot = await Lot_1.default.findOne({
            EaselNumber: contestant.EaselNumber,
            Round: round.RoundNumber,
            Event: event._id
        });
        if (!Lot) {
            if (!event.EID) {
                event.EID = `AB-${incEid++}`;
                console.log('event.EID', event.EID);
            }
            const lotModel = new Lot_1.default();
            lotModel.ArtId = `${event.EID}-${round.RoundNumber}-${contestant.EaselNumber}`;
            lotModel.EaselNumber = contestant.EaselNumber;
            lotModel.Event = event._id;
            lotModel.Round = round.RoundNumber;
            lotModel.Bids = [];
            lotModel.Status = 0;
            lotModel.Contestant = contestant.Detail;
            lotModel.ArtistId = contestant.Detail.EntryId;
            contestant.Lot = await lotModel.save();
        }
        else if (Lot) {
            contestant.Lot = Lot;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
