"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postContact = exports.getContact = void 0;
const nodemailer = require("nodemailer");
const express_validator_1 = require("express-validator");
const transporter = nodemailer.createTransport({
    service: 'SendGrid',
    auth: {
        user: process.env.SENDGRID_USER,
        pass: process.env.SENDGRID_PASSWORD
    }
});
/**
 * GET /contact
 * Contact form page.
 */
exports.getContact = (req, res) => {
    res.render('contact', {
        title: 'Contact'
    });
};
/**
 * POST /contact
 * Send a contact form via Nodemailer.
 */
exports.postContact = async (req, res) => {
    await express_validator_1.check('name', 'Name cannot be blank').not().isEmpty().run(req);
    await express_validator_1.check('email', 'Email is not valid').isEmail().run(req);
    await express_validator_1.check('message', 'Message cannot be blank').not().isEmpty().run(req);
    await express_validator_1.sanitize('email').normalizeEmail({ gmail_remove_dots: false }).run(req);
    const result = express_validator_1.validationResult(req);
    if (!result.isEmpty()) {
        req.flash('errors', result.array());
        return res.redirect('/contact');
    }
    const mailOptions = {
        to: 'your@email.com',
        from: `${req.body.name} <${req.body.email}>`,
        subject: 'Contact Form',
        text: req.body.message
    };
    transporter.sendMail(mailOptions, (err) => {
        if (err) {
            req.flash('errors', { msg: err.message });
            return res.redirect('/contact');
        }
        req.flash('success', { msg: 'Email has been sent successfully!' });
        res.redirect('/contact');
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2NvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQXlDO0FBR3pDLHlEQUFzRTtBQUV0RSxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDO0lBQzdDLE9BQU8sRUFBRSxVQUFVO0lBQ25CLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWE7UUFDL0IsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCO0tBQ3BDO0NBQ0YsQ0FBQyxDQUFDO0FBRUg7OztHQUdHO0FBQ1EsUUFBQSxVQUFVLEdBQUcsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDdEQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDcEIsS0FBSyxFQUFFLFNBQVM7S0FDakIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBQ1EsUUFBQSxXQUFXLEdBQUcsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUM3RCxNQUFNLHlCQUFLLENBQUMsTUFBTSxFQUFFLHNCQUFzQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0seUJBQUssQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUQsTUFBTSx5QkFBSyxDQUFDLFNBQVMsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzRSxNQUFNLDRCQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFOUUsTUFBTSxNQUFNLEdBQUcsb0NBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNyQixHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNwQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDakM7SUFFRCxNQUFNLFdBQVcsR0FBRztRQUNsQixFQUFFLEVBQUUsZ0JBQWdCO1FBQ3BCLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHO1FBQzVDLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU87S0FDdkIsQ0FBQztJQUVGLFdBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBc0IsRUFBRSxFQUFFO1FBQzNELElBQUksR0FBRyxFQUFFO1lBQ1AsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDMUMsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxHQUFHLEVBQUUsbUNBQW1DLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvY29udGFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5vZGVtYWlsZXIgZnJvbSAnbm9kZW1haWxlcic7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyBjaGVjaywgc2FuaXRpemUsIHZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICdleHByZXNzLXZhbGlkYXRvcic7XG5cbmNvbnN0IHRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICBzZXJ2aWNlOiAnU2VuZEdyaWQnLFxuICBhdXRoOiB7XG4gICAgdXNlcjogcHJvY2Vzcy5lbnYuU0VOREdSSURfVVNFUixcbiAgICBwYXNzOiBwcm9jZXNzLmVudi5TRU5ER1JJRF9QQVNTV09SRFxuICB9XG59KTtcblxuLyoqXG4gKiBHRVQgL2NvbnRhY3RcbiAqIENvbnRhY3QgZm9ybSBwYWdlLlxuICovXG5leHBvcnQgbGV0IGdldENvbnRhY3QgPSAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gIHJlcy5yZW5kZXIoJ2NvbnRhY3QnLCB7XG4gICAgdGl0bGU6ICdDb250YWN0J1xuICB9KTtcbn07XG5cbi8qKlxuICogUE9TVCAvY29udGFjdFxuICogU2VuZCBhIGNvbnRhY3QgZm9ybSB2aWEgTm9kZW1haWxlci5cbiAqL1xuZXhwb3J0IGxldCBwb3N0Q29udGFjdCA9IGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHsgXG4gIGF3YWl0IGNoZWNrKCduYW1lJywgJ05hbWUgY2Fubm90IGJlIGJsYW5rJykubm90KCkuaXNFbXB0eSgpLnJ1bihyZXEpO1xuICBhd2FpdCBjaGVjaygnZW1haWwnLCAnRW1haWwgaXMgbm90IHZhbGlkJykuaXNFbWFpbCgpLnJ1bihyZXEpO1xuICBhd2FpdCBjaGVjaygnbWVzc2FnZScsICdNZXNzYWdlIGNhbm5vdCBiZSBibGFuaycpLm5vdCgpLmlzRW1wdHkoKS5ydW4ocmVxKTtcbiAgYXdhaXQgc2FuaXRpemUoJ2VtYWlsJykubm9ybWFsaXplRW1haWwoeyBnbWFpbF9yZW1vdmVfZG90czogZmFsc2UgfSkucnVuKHJlcSk7XG5cbiAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xuXG4gIGlmICghcmVzdWx0LmlzRW1wdHkoKSkge1xuICAgIHJlcS5mbGFzaCgnZXJyb3JzJywgcmVzdWx0LmFycmF5KCkpO1xuICAgIHJldHVybiByZXMucmVkaXJlY3QoJy9jb250YWN0Jyk7XG4gIH1cblxuICBjb25zdCBtYWlsT3B0aW9ucyA9IHtcbiAgICB0bzogJ3lvdXJAZW1haWwuY29tJyxcbiAgICBmcm9tOiBgJHtyZXEuYm9keS5uYW1lfSA8JHtyZXEuYm9keS5lbWFpbH0+YCxcbiAgICBzdWJqZWN0OiAnQ29udGFjdCBGb3JtJyxcbiAgICB0ZXh0OiByZXEuYm9keS5tZXNzYWdlXG4gIH07XG5cbiAgdHJhbnNwb3J0ZXIuc2VuZE1haWwobWFpbE9wdGlvbnMsIChlcnI6IHsgbWVzc2FnZTogYW55OyB9KSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmVxLmZsYXNoKCdlcnJvcnMnLCB7IG1zZzogZXJyLm1lc3NhZ2UgfSk7XG4gICAgICByZXR1cm4gcmVzLnJlZGlyZWN0KCcvY29udGFjdCcpO1xuICAgIH1cbiAgICByZXEuZmxhc2goJ3N1Y2Nlc3MnLCB7IG1zZzogJ0VtYWlsIGhhcyBiZWVuIHNlbnQgc3VjY2Vzc2Z1bGx5IScgfSk7XG4gICAgcmVzLnJlZGlyZWN0KCcvY29udGFjdCcpO1xuICB9KTtcbn07XG4iXX0=
