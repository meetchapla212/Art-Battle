"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postPeopleMessageToSlack = exports.postToSlackSMSFlood = exports.postToSlackBid = exports.postToSlack = void 0;
const request_1 = require("request");
const logger_1 = require("../config/logger");
exports.postToSlack = async (payload) => {
    return await _post(payload, process.env.SLACK_CHANNEL_WEBHOOK);
};
exports.postToSlackBid = async (payload) => {
    return await _post(payload, process.env.SLACK_BIDS_CHANNEL_WEBHOOK);
};
exports.postToSlackSMSFlood = async (payload) => {
    if (process.env.SLACK_CHANNEL_SMS_FLOOD && process.env.SLACK_CHANNEL_SMS_FLOOD_ENABLE === '1') {
        return await _post(payload, process.env.SLACK_CHANNEL_SMS_FLOOD);
    }
};
exports.postPeopleMessageToSlack = async (payload) => {
    return await _post(payload, process.env.SLACK_PEOPLE_CHANNEL_WEBHOOK);
};
const _post = (payload, hook) => {
    return new Promise((resolve) => {
        request_1.post(hook, {
            body: JSON.stringify(payload)
        }, (err, response, body) => {
            if (err) {
                logger_1.default.info(err);
            }
            if (response) {
                logger_1.default.info(`slack response status code ${response.statusCode}`);
                logger_1.default.info(`slack response body ${body}`);
            }
            resolve();
        });
    });
};
exports.default = exports.postToSlack;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9TbGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBK0I7QUFDL0IsNkNBQXNDO0FBT3pCLFFBQUEsV0FBVyxHQUFHLEtBQUssRUFBRSxPQUFxQixFQUFFLEVBQUU7SUFDeEQsT0FBTyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQztBQUVXLFFBQUEsY0FBYyxHQUFHLEtBQUssRUFBRSxPQUFxQixFQUFFLEVBQUU7SUFDM0QsT0FBTyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQztBQUVXLFFBQUEsbUJBQW1CLEdBQUcsS0FBSyxFQUFFLE9BQXFCLEVBQUUsRUFBRTtJQUNoRSxJQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsS0FBSyxHQUFHLEVBQUc7UUFDOUYsT0FBTyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQ25FO0FBQ0osQ0FBQyxDQUFDO0FBRVcsUUFBQSx3QkFBd0IsR0FBRyxLQUFLLEVBQUUsT0FBcUIsRUFBRSxFQUFFO0lBQ3JFLE9BQU8sTUFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztBQUN6RSxDQUFDLENBQUM7QUFFRixNQUFNLEtBQUssR0FBRyxDQUFDLE9BQXFCLEVBQUUsSUFBWSxFQUFFLEVBQUU7SUFDbkQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzVCLGNBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7U0FDL0IsRUFBRSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDeEIsSUFBSSxHQUFHLEVBQUU7Z0JBQ04sZ0JBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkI7WUFDRCxJQUFJLFFBQVEsRUFBRTtnQkFDWCxnQkFBTSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7Z0JBQ2pFLGdCQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsT0FBTyxFQUFFLENBQUM7UUFDYixDQUFDLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsa0JBQWUsbUJBQVcsQ0FBQyIsImZpbGUiOiJjb21tb24vU2xhY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwb3N0IH0gZnJvbSAncmVxdWVzdCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuXG5pbnRlcmZhY2UgU2xhY2tQYXlsb2FkIHtcbiAgIHRleHQ6IHN0cmluZztcbiAgIG1ya2R3bj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBwb3N0VG9TbGFjayA9IGFzeW5jIChwYXlsb2FkOiBTbGFja1BheWxvYWQpID0+IHtcbiAgIHJldHVybiBhd2FpdCBfcG9zdChwYXlsb2FkLCBwcm9jZXNzLmVudi5TTEFDS19DSEFOTkVMX1dFQkhPT0spO1xufTtcblxuZXhwb3J0IGNvbnN0IHBvc3RUb1NsYWNrQmlkID0gYXN5bmMgKHBheWxvYWQ6IFNsYWNrUGF5bG9hZCkgPT4ge1xuICAgcmV0dXJuIGF3YWl0IF9wb3N0KHBheWxvYWQsIHByb2Nlc3MuZW52LlNMQUNLX0JJRFNfQ0hBTk5FTF9XRUJIT09LKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwb3N0VG9TbGFja1NNU0Zsb29kID0gYXN5bmMgKHBheWxvYWQ6IFNsYWNrUGF5bG9hZCkgPT4ge1xuICAgaWYgKCBwcm9jZXNzLmVudi5TTEFDS19DSEFOTkVMX1NNU19GTE9PRCAmJiBwcm9jZXNzLmVudi5TTEFDS19DSEFOTkVMX1NNU19GTE9PRF9FTkFCTEUgPT09ICcxJykgIHtcbiAgICAgIHJldHVybiBhd2FpdCBfcG9zdChwYXlsb2FkLCBwcm9jZXNzLmVudi5TTEFDS19DSEFOTkVMX1NNU19GTE9PRCk7XG4gICB9XG59O1xuXG5leHBvcnQgY29uc3QgcG9zdFBlb3BsZU1lc3NhZ2VUb1NsYWNrID0gYXN5bmMgKHBheWxvYWQ6IFNsYWNrUGF5bG9hZCkgPT4ge1xuICAgcmV0dXJuIGF3YWl0IF9wb3N0KHBheWxvYWQsIHByb2Nlc3MuZW52LlNMQUNLX1BFT1BMRV9DSEFOTkVMX1dFQkhPT0spO1xufTtcblxuY29uc3QgX3Bvc3QgPSAocGF5bG9hZDogU2xhY2tQYXlsb2FkLCBob29rOiBzdHJpbmcpID0+IHtcbiAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgcG9zdChob29rLCB7XG4gICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxuICAgICAgfSwgKGVyciwgcmVzcG9uc2UsIGJvZHkpID0+IHtcbiAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGVycik7XG4gICAgICAgICB9XG4gICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGBzbGFjayByZXNwb25zZSBzdGF0dXMgY29kZSAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9YCk7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgc2xhY2sgcmVzcG9uc2UgYm9keSAke2JvZHl9YCk7XG4gICAgICAgICB9XG4gICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcG9zdFRvU2xhY2s7Il19
