"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bcrypt = require("bcrypt-nodejs");
const crypto = require("crypto");
const mongoose = require("mongoose");
const UserSchema = new mongoose.Schema({
    email: { type: String, unique: true },
    password: String,
    passwordResetToken: String,
    passwordResetExpires: Date,
    isAdmin: Boolean,
    facebook: String,
    twitter: String,
    google: String,
    tokens: Array,
    profile: {
        name: String,
        gender: String,
        location: String,
        website: String,
        picture: String
    }
}, { timestamps: true });
/**
 * Password hash middleware.
 */
UserSchema.pre('save', function save(next) {
    const user = this;
    if (!user.isModified('password')) {
        return next();
    }
    bcrypt.genSalt(10, (err, salt) => {
        if (err) {
            return next(err);
        }
        bcrypt.hash(user.password, salt, undefined, (err, hash) => {
            if (err) {
                return next(err);
            }
            user.password = hash;
            next();
        });
    });
});
UserSchema.methods.comparePassword = function (candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {
        cb(err, isMatch);
    });
};
/**
 * Helper method for getting user's gravatar.
 */
UserSchema.methods.gravatar = function (size) {
    if (!size) {
        size = 200;
    }
    if (!this.email) {
        return `https://gravatar.com/avatar/?s=${size}&d=retro`;
    }
    const md5 = crypto.createHash('md5').update(this.email).digest('hex');
    return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;
};
const UserModel = mongoose.model('User', UserSchema);
// const User = mongoose.model('User', userSchema);
exports.default = UserModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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a0JBQWUsU0FBUyxDQUFDIiwiZmlsZSI6Im1vZGVscy9Vc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYmNyeXB0IGZyb20gJ2JjcnlwdC1ub2RlanMnO1xuaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XG5cbmltcG9ydCB7IFVzZXJEVE8gfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvVXNlckRUTyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlckRvY3VtZW50IGV4dGVuZHMgVXNlckRUTywgbW9uZ29vc2UuRG9jdW1lbnQge1xuICBjb21wYXJlUGFzc3dvcmQ6IChjYW5kaWRhdGVQYXNzd29yZDogc3RyaW5nLCBjYjogKGVycjogRXJyb3IsIGlzTWF0Y2g6IGJvb2xlYW4pID0+ICh2b2lkIHwgdm9pZCB8IHZvaWQpKSA9PiB2b2lkO1xuICBncmF2YXRhcjogKHNpemU6IG51bWJlcikgPT4gc3RyaW5nO1xufVxuXG5jb25zdCBVc2VyU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGVtYWlsOiB7IHR5cGU6IFN0cmluZywgdW5pcXVlOiB0cnVlIH0sXG4gIHBhc3N3b3JkOiBTdHJpbmcsXG4gIHBhc3N3b3JkUmVzZXRUb2tlbjogU3RyaW5nLFxuICBwYXNzd29yZFJlc2V0RXhwaXJlczogRGF0ZSxcblxuICBpc0FkbWluOiBCb29sZWFuLFxuXG4gIGZhY2Vib29rOiBTdHJpbmcsXG4gIHR3aXR0ZXI6IFN0cmluZyxcbiAgZ29vZ2xlOiBTdHJpbmcsXG4gIHRva2VuczogQXJyYXksXG5cbiAgcHJvZmlsZToge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICBnZW5kZXI6IFN0cmluZyxcbiAgICBsb2NhdGlvbjogU3RyaW5nLFxuICAgIHdlYnNpdGU6IFN0cmluZyxcbiAgICBwaWN0dXJlOiBTdHJpbmdcbiAgfVxufSwgeyB0aW1lc3RhbXBzOiB0cnVlIH0pO1xuXG4vKipcbiAqIFBhc3N3b3JkIGhhc2ggbWlkZGxld2FyZS5cbiAqL1xuVXNlclNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiBzYXZlKG5leHQpIHtcbiAgY29uc3QgdXNlciA9IDxtb25nb29zZS5Eb2N1bWVudCAmIFVzZXJEb2N1bWVudD50aGlzO1xuICBpZiAoIXVzZXIuaXNNb2RpZmllZCgncGFzc3dvcmQnKSkgeyByZXR1cm4gbmV4dCgpOyB9XG4gIGJjcnlwdC5nZW5TYWx0KDEwLCAoZXJyLCBzYWx0KSA9PiB7XG4gICAgaWYgKGVycikgeyByZXR1cm4gbmV4dChlcnIpOyB9XG4gICAgYmNyeXB0Lmhhc2godXNlci5wYXNzd29yZCwgc2FsdCwgdW5kZWZpbmVkLCAoZXJyOiBtb25nb29zZS5FcnJvciwgaGFzaCkgPT4ge1xuICAgICAgaWYgKGVycikgeyByZXR1cm4gbmV4dChlcnIpOyB9XG4gICAgICB1c2VyLnBhc3N3b3JkID0gaGFzaDtcbiAgICAgIG5leHQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuVXNlclNjaGVtYS5tZXRob2RzLmNvbXBhcmVQYXNzd29yZCA9IGZ1bmN0aW9uIChjYW5kaWRhdGVQYXNzd29yZDogc3RyaW5nLCBjYjogKGVycjogYW55LCBpc01hdGNoOiBhbnkpID0+IHt9KSB7XG4gIGJjcnlwdC5jb21wYXJlKGNhbmRpZGF0ZVBhc3N3b3JkLCB0aGlzLnBhc3N3b3JkLCAoZXJyOiBtb25nb29zZS5FcnJvciwgaXNNYXRjaDogYm9vbGVhbikgPT4ge1xuICAgIGNiKGVyciwgaXNNYXRjaCk7XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgZm9yIGdldHRpbmcgdXNlcidzIGdyYXZhdGFyLlxuICovXG5Vc2VyU2NoZW1hLm1ldGhvZHMuZ3JhdmF0YXIgPSBmdW5jdGlvbiAoc2l6ZTogbnVtYmVyKSB7XG4gIGlmICghc2l6ZSkge1xuICAgIHNpemUgPSAyMDA7XG4gIH1cbiAgaWYgKCF0aGlzLmVtYWlsKSB7XG4gICAgcmV0dXJuIGBodHRwczovL2dyYXZhdGFyLmNvbS9hdmF0YXIvP3M9JHtzaXplfSZkPXJldHJvYDtcbiAgfVxuICBjb25zdCBtZDUgPSBjcnlwdG8uY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKHRoaXMuZW1haWwpLmRpZ2VzdCgnaGV4Jyk7XG4gIHJldHVybiBgaHR0cHM6Ly9ncmF2YXRhci5jb20vYXZhdGFyLyR7bWQ1fT9zPSR7c2l6ZX0mZD1yZXRyb2A7XG59O1xuXG5jb25zdCBVc2VyTW9kZWwgPSBtb25nb29zZS5tb2RlbDxVc2VyRG9jdW1lbnQ+KCdVc2VyJywgVXNlclNjaGVtYSk7XG4vLyBjb25zdCBVc2VyID0gbW9uZ29vc2UubW9kZWwoJ1VzZXInLCB1c2VyU2NoZW1hKTtcbmV4cG9ydCBkZWZhdWx0IFVzZXJNb2RlbDsiXX0=
